// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CKGen.Temp.DBDoc.Template
{
    using CKGen.DBSchema;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class TableDocTemplete : TableDocTempleteBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML Transitional//EN\">\r\n<html>\r\n<head>\r\n   " +
                    " <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <tit" +
                    "le></title>\r\n    <style type=\"text/css\">\r\n        *\r\n        {\r\n            padd" +
                    "ing: 0;\r\n            margin: 0;\r\n        }\r\n        BODY\r\n        {\r\n           " +
                    " width: 100%;\r\n            color: #000000;\r\n            font-family: Verdana;\r\n " +
                    "           font-size: 14px;\r\n            font-style: normal;\r\n            font-w" +
                    "eight: normal;\r\n            margin-top: 0px;\r\n            margin-right: 0px;\r\n  " +
                    "          margin-bottom: 0px;\r\n            margin-left: 0px;\r\n            backgr" +
                    "ound-image: none;\r\n            background-attachment: scroll;\r\n            backg" +
                    "round-repeat: repeat;\r\n            background-position-x: 0%;\r\n            backg" +
                    "round-position-y: 0%;\r\n            background-color: rgb(255, 255, 255);\r\n      " +
                    "  }\r\n        A:link\r\n        {\r\n            color: #0000ff;\r\n        }\r\n        " +
                    "\r\n        DIV#mainBody\r\n        {\r\n            font-size: 100%;\r\n            mar" +
                    "gin-top: 0px;\r\n            margin-left: 0px;\r\n        }\r\n        DIV.section\r\n  " +
                    "      {\r\n            width: 100%;\r\n            padding-top: 0px;\r\n            pa" +
                    "dding-right: 0px;\r\n            padding-bottom: 0px;\r\n            padding-left: 0" +
                    "px;\r\n            margin-left: 0px;\r\n            text-align: center;\r\n        }\r\n" +
                    "        DIV#mainBody TABLE\r\n        {\r\n            width: 98.9%;\r\n            fo" +
                    "nt-size: 100%;\r\n            border-top-width: 0px;\r\n            border-right-wid" +
                    "th: 0px;\r\n            border-bottom-width: 0px;\r\n            border-left-width: " +
                    "0px;\r\n            border-top-style: none;\r\n            border-right-style: none;" +
                    "\r\n            border-bottom-style: none;\r\n            border-left-style: none;\r\n" +
                    "            margin: 5px auto;\r\n            border-collapse: collapse;\r\n        }" +
                    "\r\n        DIV#mainBody TABLE TR\r\n        {\r\n            vertical-align: top;\r\n  " +
                    "          border: 1px solid #d5d5d3;\r\n        }\r\n        DIV#mainBody TABLE TH\r\n" +
                    "        {\r\n            text-align: left;\r\n            color: #000066;\r\n         " +
                    "   padding-right: 5px;\r\n            padding-left: 5px;\r\n            padding: 5px" +
                    ";\r\n            border: 1px solid #d5d5d3;\r\n            border-bottom-color: #c8c" +
                    "dde;\r\n            border-left-color: #d5d5d3;\r\n            border-bottom-width: " +
                    "1px;\r\n            border-left-width: 1px;\r\n            border-bottom-style: soli" +
                    "d;\r\n            border-left-style: none;\r\n            background-color: rgb(239," +
                    " 239, 247);\r\n        }\r\n        DIV#mainBody TABLE TD\r\n        {\r\n            pa" +
                    "dding-right: 5px;\r\n            padding-left: 5px;\r\n            border: 1px solid" +
                    " #d5d5d3;\r\n            border-bottom-color: #d5d5d3;\r\n            border-left-co" +
                    "lor: #d5d5d3;\r\n            border-bottom-width: 1px;\r\n            border-left-wi" +
                    "dth: 1px;\r\n            border-bottom-style: solid;\r\n            border-left-styl" +
                    "e: none;\r\n            background-color: rgb(247, 247, 255);\r\n\t\t\ttext-align:left\r" +
                    "\n        }\r\n        \r\n        .header h3{margin-left:1em}\r\n    </style>\r\n</head>" +
                    "\r\n<body>\r\n    <div id=\"mainBody\">\r\n        <div class=\"header\">\r\n            <h3" +
                    ">");
            
            #line 114 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TableName));
            
            #line default
            #line hidden
            this.Write(@"</h3>
        </div>
        <div class=""section"">        
            <table>
				<colgroup>
                    <col width=""140px"" />
                    <col width=""100px"" />
                    <col width=""100px"" />
                    <col width=""80px"" />
                    <col width=""120px"" />
                    <col />
                </colgroup>
                <tbody>
                    <tr>
                        <th>
                            列名
                        </th>
                        <th>
                            数据类型
                        </th>
                        <th>
                            长度
                        </th>
                        <th>
                            是否为空
                        </th>
                        <th>
                            默认值
                        </th>
                        <th>
                            说明
                        </th>
                    </tr>
");
            
            #line 147 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"

	    foreach (var column in DBTable.Columns)
	    {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n                    <tr>\r\n                        <td>\r\n                  " +
                    "          ");
            
            #line 153 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.RawName));
            
            #line default
            #line hidden
            this.Write("\r\n                        </td>\r\n                        <td>\r\n                  " +
                    "          ");
            
            #line 156 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DBType));
            
            #line default
            #line hidden
            this.Write("\r\n                        </td>\r\n                        <td>\r\n                  " +
                    "          ");
            
            #line 159 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
 if(column.MaxLength.HasValue) {
								this.Write(column.MaxLength.Value.ToString()); 							
							}
            
            #line default
            #line hidden
            this.Write("                        </td>\r\n                        <td>\r\n\t\t\t\t\t\t\t");
            
            #line 164 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
 if(column.Nullable) {
								this.Write("是"); 							
							}else{
								this.Write("否"); 
							}
            
            #line default
            #line hidden
            this.Write("                        </td>\r\n                        <td>\r\n                    " +
                    "        \r\n                        </td>\r\n                        <td>\r\n         " +
                    "                   ");
            
            #line 174 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Description));
            
            #line default
            #line hidden
            this.Write("\r\n                        </td>\r\n                    </tr>\r\n");
            
            #line 177 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DBDoc\Template\TableDocTemplete.tt"
 
		}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>" +
                    "\r\n</body>\r\n</html>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class TableDocTempleteBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
