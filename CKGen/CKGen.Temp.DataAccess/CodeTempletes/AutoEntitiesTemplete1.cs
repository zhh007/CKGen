// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CKGen.Temp.DataAccess.CodeTempletes
{
    using CKGen.DBSchema;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class AutoEntitiesTemplete : AutoEntitiesTempleteBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing Syste" +
                    "m.Data.SqlClient;\r\nusing ");
            
            #line 9 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write(".Model;\r\nusing ");
            
            #line 10 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write(".Schema;\r\nusing ");
            
            #line 11 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write(".DAO;\r\n\r\nnamespace ");
            
            #line 13 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write(".Entities\r\n{\r\n\t[Serializable]\r\n\tpublic partial class ");
            
            #line 16 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity : ");
            
            #line 16 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Info\r\n\t{\r\n\t\tpublic static ");
            
            #line 18 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Schema Schema = new ");
            
            #line 18 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Schema();\r\n\t\tpublic static ");
            
            #line 19 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO DBAccessObject = new ");
            
            #line 19 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO();
		internal Dictionary<string, object> ValueDict = new Dictionary<string, object>();
		bool isInitLoad = false;
        bool isDirty = true;
		
		public bool IsInitLoad
        {
            get { return isInitLoad; }
            internal set { isInitLoad = value; }
        }        

        public bool IsDirty
        {
            get { return isDirty; }
            internal set { isDirty = value; }
        }
		
");
            
            #line 36 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

	    foreach (var column in DBTable.Columns)
	    {

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t/// <summary>\r\n        /// ");
            
            #line 41 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Description));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n\t\tpublic override ");
            
            #line 43 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.LanguageType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 43 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget \r\n\t\t\t{\r\n\t\t\t\treturn base.");
            
            #line 47 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write("; \r\n\t\t\t}\r\n\t\t\tset \r\n\t\t\t{\r\n\t\t\t\tValueDict[\"");
            
            #line 51 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.RawName));
            
            #line default
            #line hidden
            this.Write("\"] =  value;\r\n\t\t\t\tbase.");
            
            #line 52 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" = value; \r\n\t\t\t\tisDirty = true;\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 56 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 
		}

            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t/// <summary>\r\n        /// 插入记录\r\n        /// </summary>\r\n\t\tpublic void Inser" +
                    "t()\r\n\t\t{\r\n");
            
            #line 65 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

foreach(var column in DBTable.Columns)
{
if (column.IsPrimaryKey && !LanguageConvert.IsValueType(column.LanguageType))
{

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tif(this.");
            
            #line 71 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\tthrow new Exception(\"主键不能为空值。\");\r\n");
            
            #line 73 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

}	
}

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\tif(this.IsInitLoad == true)\r\n\t\t\t\treturn;\r\n\t\t\t");
            
            #line 79 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.InsertEntity(this);\r\n\t\t\tthis.IsInitLoad = true;\r\n            this.IsDirty = f" +
                    "alse;\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 更新记录\r\n        /// </summary>\r\n\t\tpub" +
                    "lic void Update()\r\n\t\t{\r\n");
            
            #line 89 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

foreach(var column in DBTable.Columns)
{
if (column.IsPrimaryKey && !LanguageConvert.IsValueType(column.LanguageType))
{

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tif(this.");
            
            #line 95 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\tthrow new Exception(\"主键不能为空值。\");\r\n");
            
            #line 97 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

}	
}

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\tif(this.IsDirty == false)\r\n\t\t\t\treturn;\r\n\t\t\tif (this.ValueDict.Count == 0)\r" +
                    "\n                return;\r\n\t\t\t");
            
            #line 105 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.UpdateEntity(this);\r\n\t\t\tthis.IsInitLoad = true;\r\n            this.IsDirty = f" +
                    "alse;\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 保存记录，如果不存在则插入记录，如果存在则更新记录\r\n        " +
                    "/// </summary>\r\n\t\tpublic void Save()\r\n\t\t{\r\n");
            
            #line 115 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

foreach(var column in DBTable.Columns)
{
if (column.IsPrimaryKey && !LanguageConvert.IsValueType(column.LanguageType))
{

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tif(this.");
            
            #line 121 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\tthrow new Exception(\"主键不能为空值。\");\r\n");
            
            #line 123 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

}	
}

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\tif(this.IsDirty == false)\r\n\t\t\t\treturn;\r\n\t\t\tif (this.ValueDict.Count == 0)\r" +
                    "\n            \treturn;\t\t\t\r\n\t\t\t");
            
            #line 131 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.SaveEntity(this);\r\n\t\t\tthis.IsInitLoad = true;\r\n            this.IsDirty = fal" +
                    "se;\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 删除记录\r\n        /// </summary>\r\n\t\tpubli" +
                    "c void Delete()\r\n\t\t{\r\n");
            
            #line 141 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

foreach(var column in DBTable.Columns)
{
if (column.IsPrimaryKey && !LanguageConvert.IsValueType(column.LanguageType))
{

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tif(this.");
            
            #line 147 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\tthrow new Exception(\"主键不能为空值。\");\r\n");
            
            #line 149 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

}	
}

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\t");
            
            #line 153 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.Delete(");
            
            #line 153 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetPKValueString(DBTable)));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\tthis.IsDirty = true;\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 初始化数据\r\n       " +
                    " /// </summary>\r\n\t\tpublic bool InitEntity()\r\n        {\r\n");
            
            #line 162 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

foreach(var column in DBTable.Columns)
{
if (column.IsPrimaryKey && !LanguageConvert.IsValueType(column.LanguageType))
{

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tif(this.");
            
            #line 168 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\tthrow new Exception(\"主键不能为空值。\");\r\n");
            
            #line 170 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

}	
}

            
            #line default
            #line hidden
            this.Write("\t\t\r\n            bool result = ");
            
            #line 174 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.InitEntity(this);\t\t\t\r\n\t\t\tif (result)\r\n            {\r\n                this.IsI" +
                    "nitLoad = true;\r\n                this.IsDirty = false;\r\n            }\r\n         " +
                    "   return result;\r\n        }\r\n\t\t\r\n");
            
            #line 183 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 if(DBTable.Keys.Count > 0){ 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t/// <summary>\r\n        /// 根据主键判断记录是否存在\r\n        /// </summary>\r\n\t\tpublic b" +
                    "ool Exist()\r\n\t\t{\r\n");
            
            #line 189 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

string paraString = "";
foreach(var column in DBTable.Columns)
{
	if (!column.IsPrimaryKey)
		continue;

    paraString += "this." + column.PascalName + ",";
}
paraString = paraString.TrimEnd(new char[]{','});

            
            #line default
            #line hidden
            this.Write("\t\t\treturn ");
            
            #line 199 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.Exist(");
            
            #line 199 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paraString));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\r\n");
            
            #line 201 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 203 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 if(DBTable.Keys.Count > 0){ 
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n        /// 设置主键值\r\n        /// </summary>\r\n\t\tpublic void SetKeyV" +
                    "alue(");
            
            #line 207 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetPKDefine(DBTable)));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n");
            
            #line 209 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

foreach(var column in DBTable.Columns)
{
if (!column.IsPrimaryKey)
	continue;

            
            #line default
            #line hidden
            this.Write("            this.");
            
            #line 215 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PascalName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 215 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CamelName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 216 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n");
            
            #line 220 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\r\n");
            
            #line 222 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 if(DBTable.Keys.Count > 0){ 
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n        /// 根据主键判断记录是否存在\r\n        /// </summary>\r\n\t\tpublic stati" +
                    "c bool Exist(");
            
            #line 226 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetPKDefine(DBTable)));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n");
            
            #line 228 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

string paraString = "";
foreach(var column in DBTable.Columns)
{
	if (!column.IsPrimaryKey)
		continue;

    paraString += column.CamelName + ",";
}
paraString = paraString.TrimEnd(new char[]{','});

            
            #line default
            #line hidden
            this.Write("\t\t\treturn ");
            
            #line 238 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.Exist(");
            
            #line 238 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paraString));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\r\n");
            
            #line 240 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 根据条件判断记录是否存在\r\n        /// </summary>\r\n      " +
                    "  /// <param name=\"strWhere\">where条件</param>\r\n\t\t/// <param name=\"paras\">参数集合</pa" +
                    "ram>\r\n\t\tpublic static bool Exist(string strWhere, SqlParameter[] paras)\r\n\t\t{\r\n\t\t" +
                    "\treturn ");
            
            #line 249 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.Exist(strWhere, paras);\r\n\t\t}\r\n\t\t\r\n");
            
            #line 252 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 if(DBTable.Keys.Count > 0){ 
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n        /// 根据主键删除记录\r\n        /// </summary>\r\n\t\tpublic static vo" +
                    "id Delete(");
            
            #line 256 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetPKDefine(DBTable)));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n");
            
            #line 258 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

string paraString = "";
foreach(var column in DBTable.Columns)
{
	if (!column.IsPrimaryKey)
		continue;

    paraString += column.CamelName + ",";
}
paraString = paraString.TrimEnd(new char[]{','});

            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 268 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.Delete(");
            
            #line 268 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paraString));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\r\n");
            
            #line 270 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 按条件删除记录\r\n        /// </summary>\r\n        /" +
                    "// <param name=\"strWhere\">where条件</param>\r\n\t\t/// <param name=\"paras\">参数集合</param" +
                    ">\r\n\t\tpublic static void Delete(string strWhere, SqlParameter[] paras)\r\n        {" +
                    "\r\n\t\t\t");
            
            #line 279 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.Delete(strWhere, paras);\r\n\t\t}\r\n\r\n");
            
            #line 282 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 if(DBTable.Keys.Count > 0){ 
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n        /// 根据主键获取记录\r\n        /// </summary>\r\n\t\tpublic static ");
            
            #line 286 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity Get(");
            
            #line 286 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetPKDefine(DBTable)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 288 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"

string paraString = "";
foreach(var column in DBTable.Columns)
{
	if (!column.IsPrimaryKey)
		continue;

    paraString += column.CamelName + ",";
}
paraString = paraString.TrimEnd(new char[]{','});

            
            #line default
            #line hidden
            this.Write("\t\t\treturn ");
            
            #line 298 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.GetEntity(");
            
            #line 298 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paraString));
            
            #line default
            #line hidden
            this.Write(");\t\t\t\r\n\t\t}\r\n");
            
            #line 300 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"		
		
		/// <summary>
        /// 根据条件返回所有记录
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		/// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
		public static DataSet Select(string[] columns, string strWhere, SqlParameter[] paras, List<KeyValuePair<string, int>> orderbys)
		{
			return ");
            
            #line 310 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.SelectDataSet(columns, strWhere, paras, orderbys);
		}
		
		/// <summary>
        /// 根据条件返回所有记录
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		public static DataSet Select(string strWhere, SqlParameter[] paras)
		{
			return ");
            
            #line 320 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.SelectDataSet(strWhere, paras);
		}
		
		/// <summary>
        /// 根据条件返回所有记录
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		public static DataSet Select(string strWhere)
		{
			return ");
            
            #line 330 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.SelectDataSet(strWhere);
		}
		
		/// <summary>
        /// 根据条件返回第一条记录
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		/// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
		public static ");
            
            #line 339 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity TopOne(string strWhere, SqlParameter[] paras, List<KeyValuePair<string, in" +
                    "t>> orderbys)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 341 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.TopOneEntity(strWhere, paras, orderbys);\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /" +
                    "// 根据条件返回第一条记录\r\n        /// </summary>\r\n\t\t/// <param name=\"strWhere\">where条件</pa" +
                    "ram>\r\n\t\t/// <param name=\"paras\">参数集合</param>\r\n\t\tpublic static ");
            
            #line 349 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity TopOne(string strWhere, SqlParameter[] paras)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 351 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.TopOneEntity(strWhere, paras);\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 根据条件返回第" +
                    "一条记录\r\n        /// </summary>\r\n\t\t/// <param name=\"strWhere\">where条件</param>\r\n\t\t//" +
                    "/ <param name=\"paras\">参数集合</param>\r\n\t\tpublic static ");
            
            #line 359 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity TopOne(string strWhere)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 361 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.TopOneEntity(strWhere);
		}
		
		/// <summary>
        /// 根据条件返回所有记录
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		/// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
		public static List<");
            
            #line 370 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> List(string strWhere, SqlParameter[] paras, List<KeyValuePair<string, int" +
                    ">> orderbys)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 372 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.ListEntities(strWhere, paras, orderbys);\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /" +
                    "// 根据条件返回所有记录\r\n        /// </summary>\r\n\t\t/// <param name=\"strWhere\">where条件</par" +
                    "am>\r\n\t\t/// <param name=\"paras\">参数集合</param>\r\n\t\tpublic static List<");
            
            #line 380 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> List(string strWhere, SqlParameter[] paras)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 382 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.ListEntities(strWhere, paras);\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 根据条件返回所" +
                    "有记录\r\n        /// </summary>\r\n\t\t/// <param name=\"strWhere\">where条件</param>\r\n\t\t///" +
                    " <param name=\"paras\">参数集合</param>\r\n\t\tpublic static List<");
            
            #line 390 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> List(string strWhere)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 392 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.ListEntities(strWhere);
		}
		
		/// <summary>
        /// 获取分页后的记录
        /// </summary>
        /// <param name=""columns"">列名称</param>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
        /// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
        /// <param name=""pageIndex"">第几页</param>
        /// <param name=""pageSize"">页大小</param>
        /// <param name=""pageCount"">分页数</param>
        /// <param name=""totalCount"">总记录数</param>
        /// <returns></returns>
		public static DataSet Paged(string[] columns, string strWhere, SqlParameter[] paras, List<KeyValuePair<string, int>> orderbys, int pageIndex, int pageSize, out int pageCount, out int totalCount)
        {
			return ");
            
            #line 409 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.PagedDataSet(columns, strWhere, paras, orderbys, pageIndex, pageSize, out pageCount, out totalCount);
		}
		
		/// <summary>
        /// 获取分页后的记录,包括所有列
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
        /// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
        /// <param name=""pageIndex"">第几页</param>
        /// <param name=""pageSize"">页大小</param>
        /// <param name=""pageCount"">分页数</param>
        /// <param name=""totalCount"">总记录数</param>
        /// <returns></returns>
		public static DataSet Paged(string strWhere, SqlParameter[] paras, List<KeyValuePair<string, int>> orderbys, int pageIndex, int pageSize, out int pageCount, out int totalCount)
		{
			return ");
            
            #line 425 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.PagedDataSet(strWhere, paras, orderbys, pageIndex, pageSize, out pageCount, out totalCount);
		}
		
		/// <summary>
        /// 获取分页后的记录,包括所有列
        /// </summary>
        /// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
        /// <param name=""pageIndex"">第几页</param>
        /// <param name=""pageSize"">页大小</param>
        /// <param name=""pageCount"">分页数</param>
        /// <param name=""totalCount"">总记录数</param>
        /// <returns></returns>
		public static DataSet Paged(List<KeyValuePair<string, int>> orderbys, int pageIndex, int pageSize, out int pageCount, out int totalCount)
		{
			return ");
            
            #line 439 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.PagedDataSet(orderbys, pageIndex, pageSize, out pageCount, out totalCount);
		}
		
		/// <summary>
        /// 获取分页数据
        /// </summary>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
        /// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
        /// <param name=""pageIndex"">第几页</param>
        /// <param name=""pageSize"">页大小</param>
        /// <param name=""pageCount"">分页数</param>
        /// <param name=""totalCount"">总记录数</param>
        /// <returns></returns>
		public static List<");
            
            #line 453 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> PagedList(string strWhere, SqlParameter[] paras, List<KeyValuePair<string" +
                    ", int>> orderbys, int pageIndex, int pageSize, out int pageCount, out int totalC" +
                    "ount)\r\n        {\r\n\t\t\treturn ");
            
            #line 455 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.PagedListEntities(strWhere, paras, orderbys, pageIndex, pageSize, out pageCount, out totalCount);
		}
		
		/// <summary>
        /// 获取分页数据,包括所有列
        /// </summary>
        /// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
        /// <param name=""pageIndex"">第几页</param>
        /// <param name=""pageSize"">页大小</param>
        /// <param name=""pageCount"">分页数</param>
        /// <param name=""totalCount"">总记录数</param>
        /// <returns></returns>
		public static List<");
            
            #line 467 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> PagedList(List<KeyValuePair<string, int>> orderbys, int pageIndex, int pa" +
                    "geSize, out int pageCount, out int totalCount)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 469 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.PagedListEntities(orderbys, pageIndex, pageSize, out pageCount, out totalCount);
		}
		
		/// <summary>
        /// 根据条件返回前N条记录
        /// </summary>
		/// <param name=""topN"">返回几条记录</param>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		/// <param name=""orderbys"">排序字段，0表示ASC，1表示DESC</param>
		public static List<");
            
            #line 479 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> TopN(int topN, string strWhere, SqlParameter[] paras, List<KeyValuePair<s" +
                    "tring, int>> orderbys)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 481 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.TopNEntities(topN, strWhere, paras, orderbys);
		}
		
		/// <summary>
        /// 根据条件返回前N条记录
        /// </summary>
		/// <param name=""topN"">返回几条记录</param>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		public static List<");
            
            #line 490 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> TopN(int topN, string strWhere, SqlParameter[] paras)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 492 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write(@"DAO.TopNEntities(topN, strWhere, paras);
		}
		
		/// <summary>
        /// 根据条件返回前N条记录
        /// </summary>
		/// <param name=""topN"">返回几条记录</param>
		/// <param name=""strWhere"">where条件</param>
		/// <param name=""paras"">参数集合</param>
		public static List<");
            
            #line 501 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("Entity> TopN(int topN, string strWhere)\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 503 "D:\zhhcode\CKGen\CKGen\CKGen.Temp.DataAccess\CodeTempletes\AutoEntitiesTemplete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBTable.Name));
            
            #line default
            #line hidden
            this.Write("DAO.TopNEntities(topN, strWhere);\r\n\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class AutoEntitiesTempleteBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
