<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyMeta</name>
    </assembly>
    <members>
        <member name="T:MyMeta.IResultColumns">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IResultColumns.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="M:MyMeta.IResultColumns.GetEnumerator">
            <summary>
            Used to support 'foreach' sytax. Do not call this directly.
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumns.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IResultColumns.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumns.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumns.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IResultColumn">
            <summary>
            IResultColumn represents a column in the result set returned by a Procedure.
            </summary>
            <remarks>
            IResultColumn Collections:
            <list type="table">
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all ResultColumns with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objResultColumn
            For Each objResultColumn in objProcedure.ResultColumns
                output.writeLn objResultColumn.Name
                output.writeLn objResultColumn.Alias
            Next
            </code>
            JScript
            <code>
            var objResultColumn;
            for (var j = 0; j &lt; objProcedure.ResultColumns; j++) 
            {
                objResultColumn = objProcedure.ResultColumns.Item(j);
                
                output.writeln(objResultColumn.Name);
                output.writeln(objResultColumn.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IResultColumn.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IResultColumn.Properties">
            <summary>
            The Properties for this view. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.GlobalProperties">
            <summary>
            The Properties for all ResultColumns within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IResultColumn.Properties"/> (local) collection and the <see cref="P:MyMeta.IResultColumn.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.Alias">
            <summary>
            You can override the physical name of the result column. If you do not provide an Alias the value of 'ResultColumn.Name' is returned.
            If your result column in your procedure  is 'Q99AAB' you might want to give it an Alias of 'Employees' so that your business object names will make sense.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IResultColumn.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.Name">
            <summary>
            This is the physical table name as stored in your DBMS system. See <see cref="P:MyMeta.IResultColumn.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.DataType">
            <summary>
            N/A
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.DataTypeName">
            <summary>
            The native data type as stored in your DBMS system, for instance a SQL 'nvarchar', or Access 'Memo'. See <see cref="P:MyMeta.IResultColumn.DataTypeNameComplete"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.DataTypeNameComplete">
            <summary>
            This is the full data type name, whereas the DataType property might be 'nvarchar' the DataTypeName property would be 'nvarchar(200)', this varies from DBMS to DBMS.
            See <see cref="P:MyMeta.IResultColumn.DataTypeName"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.LanguageType">
            <summary>
            The Language Mappings window is where these are entered and they are stored in 'Languages.xml'. 
            If your DMBS system is Microsoft SQL and your language is C# then nvarchar will be mapped to a C# 'string'. 
            Anytime that you need to expose this columns value to your programming language use this value.
            See <see cref="P:MyMeta.IResultColumn.DbTargetType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.DbTargetType">
            <summary>
            The DbTarget Mappings window is where these are entered and they are stored in 'DbTargets.xml'. 
            If your DMBS system is Microsoft SQL and your DbDriver is 'SqlClient' then nvarchar will be mapped to a SqlCleint 'SqlDbType.NVarChar'.
            See <see cref="P:MyMeta.IResultColumn.LanguageType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IResultColumn.Ordinal">
            <summary>
            The ordinal of the result column. ResultColumns are numbered starting from one.
            </summary>
        </member>
        <member name="T:MyMeta.INameValueItem">
            <summary>
            This interface allows all the collections here to be bound to 
            Name/Value collection type objects. with ease
            </summary>
        </member>
        <member name="T:MyMeta.IView">
            <summary>
            IView represents a view in your DBMS.
            </summary>
            <remarks>
            IView Collections:
            <list type="table">
            	<item><term>Columns</term><description>Contains all of the columns for the view</description></item>
            	<item><term>SubTables</term><description>An ITables collection that contains all the tables used directly by this view</description></item>
            	<item><term>SubViews</term><description>An IViews collection that contains all of the views used directly by this view</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all Views with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>	
            </remarks>
            <example>
            VBScript
            <code>
            Dim objView
            For Each objView in objDatabase.Views
                output.writeLn objView.Name
                output.writeLn objView.Alias
            Next
            </code>
            JScript
            <code>
            var objView;
            for (var j = 0; j &lt; objDatabase.Views.Count; j++) 
            {
                objView = objDatabase.Views.Item(j);
                
                output.writeln(objView.Name);
                output.writeln(objView.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IView.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IView.Columns">
            <summary>
            The Columns collection for this table in ordinal order. See <see cref="T:MyMeta.IColumn"/>
            </summary>
        </member>
        <member name="P:MyMeta.IView.SubTables">
            <summary>
            An ITables collection that contains all the tables used directly by this view. This can be useful for determining dependencies.
            </summary>
        </member>
        <member name="P:MyMeta.IView.SubViews">
            <summary>
            An IViews collection that contains all of the views used directly by this view. This can be useful for determining dependencies.
            </summary>
        </member>
        <member name="P:MyMeta.IView.Properties">
            <summary>
            The Properties for this view. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IView.GlobalProperties">
            <summary>
            The Properties for all Views within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IView.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IView.Properties"/> (local) collection and the <see cref="P:MyMeta.IView.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IView.Alias">
            <summary>
            You can override the physical name of the View. If you do not provide an Alias the value of 'View.Name' is returned.
            If your view in your DBMS is 'Q99AAB' you might want to give it an Alias of 'Employees' so that your business object names will make sense.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IView.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IView.Name">
            <summary>
            This is the physical table name as stored in your DBMS system. See <see cref="P:MyMeta.IView.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IView.Schema">
            <summary>
            This is the schema of the View.
            </summary>
        </member>
        <member name="P:MyMeta.IView.Database">
            <summary>
            The parent database of the view.
            </summary>
        </member>
        <member name="P:MyMeta.IView.ViewText">
            <summary>
            This is a query expression, Blank if not provided.
            </summary>
        </member>
        <member name="P:MyMeta.IView.CheckOption">
            <summary>
            'True' if  Local update checking only, 'False' if cascaded update checking (same as no CHECK OPTION specified on view definition).
            </summary>
        </member>
        <member name="P:MyMeta.IView.IsUpdateable">
            <summary>
            ''True' if the view is updateable, 'False' if not.
            </summary>
        </member>
        <member name="P:MyMeta.IView.Type">
             <summary>
             The table type, 'TABLE' if not provided.
             </summary>
             <remarks>
             <list type="bullet">
            		<item>VIEW</item>
            		<item>SYSTEM VIEW</item>
             </list>
            </remarks>
        </member>
        <member name="P:MyMeta.IView.Guid">
            <summary>
            Tab;e GUID. For Providers that do not use GUIDs to identify tables 'Guid.Empty' is returned.
            </summary>
        </member>
        <member name="P:MyMeta.IView.Description">
            <summary>
            Human-readable description of the table. Blank if there is no description associated with the table.
            </summary>
        </member>
        <member name="P:MyMeta.IView.PropID">
            <summary>
            Column property ID. For Providers that do not associate PROPIDs with columns 0 is returned.
            </summary>
        </member>
        <member name="P:MyMeta.IView.DateCreated">
            <summary>
            Date when the view was created or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="P:MyMeta.IView.DateModified">
            <summary>
            Date when the view definition was last modified or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="T:MyMeta.ITabularEntity">
            <summary>
            This interface allows all the collections here to be bound to 
            Name/Value collection type objects. with ease
            </summary>
        </member>
        <member name="M:MyMeta.ITabularEntity.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.ITabularEntity.Alias">
            <summary>
            You can override the physical name of the View. If you do not provide an Alias the value of 'entity.Name' is returned.
            If your view in your DBMS is 'Q99AAB' you might want to give it an Alias of 'Employees' so that your business object names will make sense.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.ITabularEntity.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Name">
            <summary>
            This is the physical table name as stored in your DBMS system. See <see cref="P:MyMeta.ITabularEntity.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Schema">
            <summary>
            This is the schema of the entity.
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Database">
            <summary>
            The parent database of the entity.
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Columns">
            <summary>
            The Columns collection for this entity in ordinal order. See <see cref="T:MyMeta.IColumn"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Properties">
            <summary>
            The Properties for this view. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.GlobalProperties">
            <summary>
            The Properties for all Views within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.ITabularEntity.Properties"/> (local) collection and the <see cref="P:MyMeta.ITabularEntity.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Type">
             <summary>
             The table type, 'TABLE' if not provided.
             </summary>
             <remarks>
             <list type="bullet">
            		<item>VIEW</item>
            		<item>SYSTEM VIEW</item>
             </list>
            </remarks>
        </member>
        <member name="P:MyMeta.ITabularEntity.Guid">
            <summary>
            Tab;e GUID. For Providers that do not use GUIDs to identify tables 'Guid.Empty' is returned.
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.Description">
            <summary>
            Human-readable description of the table. Blank if there is no description associated with the table.
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.PropID">
            <summary>
            Column property ID. For Providers that do not associate PROPIDs with columns 0 is returned.
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.DateCreated">
            <summary>
            Date when the view was created or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="P:MyMeta.ITabularEntity.DateModified">
            <summary>
            Date when the view definition was last modified or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="T:MyMeta.IColumns">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IColumns.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IColumns.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IColumns.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IColumns.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IColumns.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IParameter">
            <summary>
            IParameter represents a parameter of an IProcedure in your DBMS.
            </summary>
            <remarks>
            IParameter Collections:
            <list type="table">
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all Parameters with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objParameter
            For Each objParameter in objProcedure.Parameters
                output.writeLn objParameter.Name
                output.writeLn objParameter.Alias
            Next
            </code>
            JScript
            <code>
            var objParameter;
            for (var j = 0; j &lt; objProcedure.Parameters; j++) 
            {
                objParameter = objProcedure.Parameters.Item(j);
                
                output.writeln(objParameter.Name);
                output.writeln(objParameter.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IParameter.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IParameter.Properties">
            <summary>
            The Properties for this parameter. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.GlobalProperties">
            <summary>
            The Properties for all Parameters within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IParameter.Properties"/> (local) collection and the <see cref="P:MyMeta.IParameter.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.Alias">
            <summary>
            You can override the physical name of the Table. If you do not provide an Alias the value of 'Table.Name' is returned.
            If your table in your DBMS is 'Q99AAB' you might want to give it an Alias of 'Employees' so that your business object names will make sense.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IParameter.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.Name">
            <summary>
            This is the physical table name as stored in your DBMS system. See <see cref="P:MyMeta.IParameter.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.Ordinal">
            <summary>
            If the parameter is an input, input/output, or output parameter, this is the one-based ordinal position of the parameter in the procedure call. 
            If the parameter is the return value, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.ParameterType">
            <summary>
            N/A
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.HasDefault">
            <summary>
            True if the parameter has a default value, False if not.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.Default">
            <summary>
            The unparsed DBMS default value.  If the default is a null then "&lt;null&gt;" is the value.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.IsNullable">
            <summary>
            True if the parameter is nullable, False if not.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.DataTypeNameComplete">
            <summary>
            This is the full data type name, whereas the DataType property might be 'nvarchar' the DataTypeName property would be 'nvarchar(200)', this varies from DBMS to DBMS.
            See <see cref="P:MyMeta.IParameter.TypeName"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.LanguageType">
            <summary>
            The Language Mappings window is where these are entered and they are stored in 'Languages.xml'. 
            If your DMBS system is Microsoft SQL and your language is C# then nvarchar will be mapped to a C# 'string'. 
            Anytime that you need to expose this Parameters value to your programming language use this value.
            See <see cref="P:MyMeta.IParameter.DbTargetType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.DbTargetType">
            <summary>
            The DbTarget Mappings window is where these are entered and they are stored in 'DbTargets.xml'. 
            If your DMBS system is Microsoft SQL and your DbDriver is 'SqlClient' then nvarchar will be mapped to a SqlCleint 'SqlDbType.NVarChar'.
            See <see cref="P:MyMeta.IParameter.LanguageType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.CharacterMaxLength">
            <summary>
            The maximum possible length of a value in the column. For character, binary, or bit columns, this is one of the following: 
            <list type="bullet">
            <item>
            The maximum length of the column in characters, bytes, or bits, respectively, if one is defined. For example, a CHAR(5) column in an SQL table has a maximum length of 5. 
            </item>
            <item>
            The maximum length of the data type in characters, bytes, or bits, respectively, if the column does not have a defined length. 
            </item>
            <item>
            Zero (0) if neither the column nor the data type has a defined maximum length.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.CharacterOctetLength">
            <summary>
            Maximum length in octets (bytes) of the column, if the type of the column is character or binary. Zero for all other types of columns.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.NumericPrecision">
            <summary>
            If the column's data type is of a numeric data type other than VARNUMERIC, this is the maximum precision of the column. 
            The precision of columns with a data type of DBTYPE_DECIMAL or DBTYPE_NUMERIC depends on the definition of the column. 
            For the precision of all other numeric data types, see (http://msdn.microsoft.com/library/en-us/oledb/htm/olprappendixa_2.asp) "Precision of Numeric Data Types" in Appendix A.
            If the column's data type is not numeric or is VARNUMERIC, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.NumericScale">
            <summary>
            If the column's type indicator is DBTYPE_DECIMAL, DBTYPE_NUMERIC, or DBTYPE_VARNUMERIC, 
            this is the number of digits to the right of the decimal point. Otherwise, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.Description">
            <summary>
            Human-readable description of the parameter. 
            For example, the description of a parameter named Name in a procedure that adds a new employee might be "Employee name."
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.TypeName">
            <summary>
            The native data type as stored in your DBMS system, for instance a SQL 'nvarchar', or Access 'Memo'.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.LocalTypeName">
            <summary>
            Localized version of 'TypeName'. Blank is returned if a localized name is not supported by the data provider.
            </summary>
        </member>
        <member name="P:MyMeta.IParameter.Direction">
            <summary>
            See the ParamDirection Enumeration.
            </summary>
        </member>
        <member name="T:MyMeta.IIndexes">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IIndexes.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IIndexes.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objIndex
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IIndexes.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IIndexes.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IIndexes.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IProcedure">
            <summary>
            IProcedure represents a view or function in your DBMS.
            </summary>
            <remarks>
            IProcedure Collections:
            <list type="table">
            	<item><term>Parameters</term><description>Contains all of the parameters for the procedure</description></item>
            	<item><term>ResultColumns</term><description>Contains an IResultColumn for each column return by the procedure</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all Procedures with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>	
            </remarks>
            <example>
            VBScript
            <code>
            output.writeLn "This Procedure takes   " + objProcedure.Parameters.Count    + " Parameters"
            output.writeLn "This Procedure returns " + objProcedure.ResultColumns.Count + " ResultColumns"
            </code>
            JScript
            <code>
            output.writeln("This Procedure takes   " + objProcedure.Parameters.Count    + " Parameters");
            output.writeln("This Procedure returns " + objProcedure.ResultColumns.Count + " ResultColumns");
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IProcedure.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IProcedure.Parameters">
            <summary>
            Contains all of the parameters for the procedure.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.ResultColumns">
            <summary>
            Contains an IResultColumn for each column return by the procedure.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Properties">
            <summary>
            The Properties for this procedure. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.GlobalProperties">
            <summary>
            The Properties for all Procedures within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IProcedure.Properties"/> (local) collection and the <see cref="P:MyMeta.IProcedure.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Database">
            <summary>
            The parent database of the procedure.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Alias">
            <summary>
            You can override the physical name of the Procedure. If you do not provide an Alias the value of 'Procedure.Name' is returned.
            If your Procedure in your DBMS is 'Q99AAB' you might want to give it an Alias of 'Employees' so that your business object names will make sense.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IProcedure.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Name">
            <summary>
            This is the physical table name as stored in your DBMS system. See <see cref="P:MyMeta.IProcedure.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Schema">
            <summary>
            This is the schema of the Procedure.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Type">
            <summary>
            N/A
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.ProcedureText">
            <summary>
            Procedure definition or blank if not provided.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.Description">
            <summary>
            Human-readable description of the procedure.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.DateCreated">
            <summary>
            Date when the procedure was created or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="P:MyMeta.IProcedure.DateModified">
            <summary>
            Date when the procedure definition was last modified or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="T:MyMeta.IForeignKey">
            <summary>
            IForeignKey represents an foreign key on a table in your DBMS.
            </summary>
            <remarks>
            IForeignKey Collections:
            <list type="table">
            	<item><term>ForeignColumns</term><description>A collection of columns that are in the foreign table that make up the key</description></item>
            	<item><term>PrimaryColumns</term><description>A collection of columns that are in the parent table that make up the key</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>	
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all ForeignKeys with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objForeignKey
            For Each objForeignKey in objTable.ForeignKeys
                output.writeLn objForeignKey.Name
                output.writeLn objForeignKey.Alias
            Next
            </code>
            JScript
            <code>
            var objForeignKey;
            for (var j = 0; j &lt; objTable.ForeignKeys; j++) 
            {
                objColumn = objTable.ForeignKeys.Item(j);
                
                output.writeln(objForeignKey.Name);
                output.writeln(objForeignKey.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IForeignKey.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IForeignKey.Alias">
            <summary>
            You can override the physical name of the foreign key. If you do not provide an Alias the value of 'ForeignKey.Name' is returned.
            If your foreign key in your DBMS is 'TXT_FIRST_NAME' you might want to give it an Alias of 'FirstName' so that your business object property will be a nice name.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IForeignKey.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.Name">
            <summary>
            This is the physical name of the primary key name as stored in your DBMS system. See <see cref="P:MyMeta.IForeignKey.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.PrimaryTable">
            <summary>
            The parent key table of this foreign key
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.ForeignTable">
            <summary>
            The foreign key table of this foreign key
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.ForeignColumns">
            <summary>
            A collection of columns that are in the foreign table (not in this table) that make up the key
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.PrimaryColumns">
            <summary>
            A collection of columns that are in the parent table that make up the key
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.Properties">
            <summary>
            The Properties for this ForeignKey. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.GlobalProperties">
            <summary>
            The Properties for all ForeignKeys within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IForeignKey.Properties"/> (local) collection and the <see cref="P:MyMeta.IForeignKey.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.UpdateRule">
            <summary>
            The type of the foreign key. One of the following (or blank):
            <list type="table">
            	<item><term>CASCADE</term><description>A referential action of CASCADE was specified</description></item>
            	<item><term>SET NULL</term><description>A referential action of SET NULL was specified</description></item>		
            	<item><term>SET DEFAULT</term><description>A referential action of SET DEFAULT was specified</description></item>
            	<item><term>NO ACTION</term><description>A referential action of NO ACTION was specified</description></item>	
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.DeleteRule">
            <summary>
            The type of the foreign key. One of the following (or blank):
            <list type="table">
            	<item><term>CASCADE</term><description>A referential action of CASCADE was specified</description></item>
            	<item><term>SET NULL</term><description>A referential action of SET NULL was specified</description></item>		
            	<item><term>SET DEFAULT</term><description>A referential action of SET DEFAULT was specified</description></item>
            	<item><term>NO ACTION</term><description>A referential action of NO ACTION was specified</description></item>	
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.PrimaryKeyName">
            <summary>
            The Primary Key name
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKey.Deferrability">
            <summary>
            The type of the foreign key. One of the following (or blank):
            <list type="table">
            	<item><term>INITIALLY_DEFERRED</term><description></description></item>
            	<item><term>INITIALLY_IMMEDIATE	</term><description></description></item>		
            	<item><term>NOT_DEFERRABLE</term><description></description></item>
            	<item><term>UNKNOWN</term><description></description></item>
            </list>
            </summary>
        </member>
        <member name="T:MyMeta.IDomains">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IDomains.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IDomains.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string.
            </param>
        </member>
        <member name="P:MyMeta.IDomains.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IDomains.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IDomains.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IDomain">
            <summary>
            Summary description for IDomain.
            </summary>
        </member>
        <member name="M:MyMeta.IDomain.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IDomain.Properties">
            <summary>
            The Properties (Local) for this domain. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.GlobalProperties">
            <summary>
            The Properties for all Domains within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IDomain.Properties"/> (local) collection and the <see cref="P:MyMeta.IDomain.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.Alias">
            <summary>
            You can override the physical name of the Domain. If you do not provide an Alias the value of 'Domain.Name' is returned.
            If your domain in your DBMS is 'TXT_FIRST_NAME' you might want to give it an Alias of 'FirstName' so that your business object property will be a nice name.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IDomain.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.Name">
            <summary>
            This is the physical domain name as stored in your DBMS system. See <see cref="P:MyMeta.IDomain.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DataTypeName">
            <summary>
            The native data type as stored in your DBMS system, for instance a SQL 'nvarchar', or Access 'Memo'. See <see cref="P:MyMeta.IDomain.DataTypeNameComplete"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DataTypeNameComplete">
            <summary>
            This is the full data type name, whereas the DataType property might be 'nvarchar' the DataTypeName property would be 'nvarchar(200)', this varies from DBMS to DBMS.
            See <see cref="P:MyMeta.IDomain.DataTypeName"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.LanguageType">
            <summary>
            The Language Mappings window is where these are entered and they are stored in 'Languages.xml'. 
            If your DMBS system is Microsoft SQL and your language is C# then nvarchar will be mapped to a C# 'string'. 
            Anytime that you need to expose this domains value to your programming language use this value.
            See <see cref="P:MyMeta.IDomain.DbTargetType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DbTargetType">
            <summary>
            The DbTarget Mappings window is where these are entered and they are stored in 'DbTargets.xml'. 
            If your DMBS system is Microsoft SQL and your DbDriver is 'SqlClient' then nvarchar will be mapped to a SqlCleint 'SqlDbType.NVarChar'.
            See <see cref="P:MyMeta.IDomain.LanguageType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.IsNullable">
            <summary>
            The Domain allows null in your DBMS system.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.HasDefault">
            <summary>
            If 'True' the domain has a default value. If 'False' the domain does not have a default value, or it is unknown whether the domain has a default value.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.Default">
            <summary>
            The actual unparsed default from your DBMS system, for instance in SQL server it might be 'getdate()' for a DateTime field or N'USA' for Country.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.CharacterMaxLength">
            <summary>
            The maximum possible length of a value in the domain. For character, binary, or bit domains, this is one of the following: 
            <list type="bullet">
            <item>
            The maximum length of the domain in characters, bytes, or bits, respectively, if one is defined. For example, a CHAR(5) domain in an SQL table has a maximum length of 5. 
            </item>
            <item>
            The maximum length of the data type in characters, bytes, or bits, respectively, if the domain does not have a defined length. 
            </item>
            <item>
            Zero (0) if neither the domain nor the data type has a defined maximum length.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.CharacterOctetLength">
            <summary>
            Maximum length in octets (bytes) of the domain, if the type of the domain is character or binary. Zero for all other types of domains.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.NumericPrecision">
            <summary>
            If the domain's data type is of a numeric data type other than VARNUMERIC, this is the maximum precision of the domain. 
            The precision of domains with a data type of DBTYPE_DECIMAL or DBTYPE_NUMERIC depends on the definition of the domain. 
            For the precision of all other numeric data types, see (http://msdn.microsoft.com/library/en-us/oledb/htm/olprappendixa_2.asp) "Precision of Numeric Data Types" in Appendix A.
            If the domain's data type is not numeric or is VARNUMERIC, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.NumericScale">
            <summary>
            If the domain's type indicator is DBTYPE_DECIMAL, DBTYPE_NUMERIC, or DBTYPE_VARNUMERIC, 
            this is the number of digits to the right of the decimal point. Otherwise, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DateTimePrecision">
            <summary>
            Datetime precision (number of digits in the fractional seconds portion) of the domain if the domain is a datetime or interval type. If the domain's data type is not datetime, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.CharacterSetCatalog">
            <summary>
            Catalog name in which the character set is defined. Blank if the provider does not support catalogs or different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.CharacterSetSchema">
            <summary>
            Unqualified schema name in which the character set is defined. Blank if the provider does not support schemas or different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.CharacterSetName">
            <summary>
            Character set name. Blank if the provider does not support different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DomainCatalog">
            <summary>
            Catalog name in which the domain is defined. Blank if the provider does not support catalogs or domains.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DomainSchema">
            <summary>
            Unqualified schema name in which the domain is defined. Blank if the provider does not support schemas or domains.
            </summary>
        </member>
        <member name="P:MyMeta.IDomain.DomainName">
            <summary>
            Domain name. Blank if the provider does not support domains.
            </summary>
        </member>
        <member name="T:MyMeta.ITables">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.ITables.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.ITables.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.ITables.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.ITables.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.ITables.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IIndex">
            <summary>
            IIndex represents an index on a table in your DBMS.
            </summary>
            <remarks>
            IIndex Collections:
            <list type="table">
            	<item><term>Columns</term><description>A collection of columns that make up this Index</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all Indexes with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objIndex
            For Each objIndex in objTable.Indexes
                output.writeLn objIndex.Name
                output.writeLn objIndex.Alias
            Next
            </code>
            JScript
            <code>
            var objIndex;
            for (var j = 0; j &lt; objTable.Indexes; j++) 
            {
                objIndex = objTable.Indexes.Item(j);
                
                output.writeln(objIndex.Name);
                output.writeln(objIndex.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IIndex.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IIndex.Table">
            <summary>
            The parent table of the index.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Columns">
            <summary>
            This is a columns collection that contains the columns that make up the index.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Properties">
            <summary>
            The Properties for this index. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.GlobalProperties">
            <summary>
            The Properties for all Indexes within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IIndex.Properties"/> (local) collection and the <see cref="P:MyMeta.IIndex.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Alias">
            <summary>
            You can override the physical name of the index. If you do not provide an Alias the value of 'Index.Name' is returned.
            If your column in your DBMS is 'TXT_FIRST_NAME' you might want to give it an Alias of 'FirstName' so that your business object property will be a nice name.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IIndex.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Name">
            <summary>
            This is the physical column name as stored in your DBMS system. See <see cref="P:MyMeta.IIndex.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Schema">
            <summary>
            This is the schema of the Index.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Unique">
            <summary>
            True if the index keys must be unique, False if duplicate keys are allowed.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Clustered">
            <summary>
            <list type="bullet">
            <item>True - if the leaf nodes of the index contain full rows, not bookmarks. This is a way to represent a table clustered by key value.</item>
            <item>False - if the leaf nodes of the index contain bookmarks of the base table rows whose key value matches the key value of the index entry.</item>
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Type">
            <summary>
            The type of the index. One of the following:
            <list type="table">
            	<item><term>BTREE</term><description>The index is a B+-tree</description></item>
            	<item><term>HASH</term><description>The index is a hash file using, for example, linear or extensible hashing</description></item>		
            	<item><term>CONTENT</term><description>The index is a content index</description></item>
            	<item><term>OTHER</term><description>The index is some other type of index</description></item>	
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.FillFactor">
            <summary>
            For a B+-tree index, this property represents the storage utilization factor of page nodes during the creation of the index. 
            The value is an integer from 0 to 100 representing the percentage of use of an index node. 
            For a linear hash index, this property represents the storage utilization of the entire hash structure 
            (the ratio of used area to total allocated area) before a file structure expansion occurs.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.InitialSize">
            <summary>
            The total amount of bytes allocated to this structure at creation time.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.SortBookmarks">
            <summary>
            True if the index sorts repeated keys by bookmark, False if the index does not sort repeated keys by bookmark.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.AutoUpdate">
            <summary>
            Whether the index is maintained automatically when changes are made to the corresponding base table. One of the following: 
            <list type="bullet">
            <item>True - The index is automatically maintained.</item>
            <item>False - The index must be maintained by the consumer through explicit calls.</item>
            </list> 
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.NullCollation">
            <summary>
            How NULLs are collated in the index. One of the following 
            <list type="table">
            	<item><term>END</term><description>NULLs are collated at the end of the list, regardless of the collation order</description></item>
            	<item><term>START</term><description>NULLs are collated at the start of the list, regardless of the collation order</description></item>		
            	<item><term>HIGH</term><description>NULLs are collated at the high end of the list</description></item>
            	<item><term>LOW</term><description>NULLs are collated at the low end of the list</description></item>	
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Collation">
            <summary>
            One of the following: 
            <list type="table">
            	<item><term>ASCENDING</term><description>The sort sequence for the column is ascending</description></item>
            	<item><term>DESCENDING</term><description>The sort sequence for the column is descending</description></item>		
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Cardinality">
            <summary>
            Number of unique values in the index.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Pages">
            <summary>
            Number of pages used to store the index.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.FilterCondition">
            <summary>
            The WHERE clause identifying the filtering restriction.
            </summary>
        </member>
        <member name="P:MyMeta.IIndex.Integrated">
            <summary>
            Whether the index is integrated. That is, all base table columns are available from the index. One of the following:
            <list type="bullet">
            <item>True - The index is integrated. For clustered indexes this value will always be True.</item>
            <item>False - The index is not integrated.</item>
            </list> ///  
            </summary>
        </member>
        <member name="T:MyMeta.IDatabase">
            <summary>
            IDatabase represents a databaase in your DBMS.
            </summary>
            <remarks>
            IDatabase has 5 Collections:
            <list type="table">
            	<item><term>Tables</term><description>Contains all of the tables for the databaase</description></item>
            	<item><term>Views</term><description>Contains all of the views the databaase</description></item>
            	<item><term>Procedures</term><description>Contains all of the procedures for the databaase</description></item>
            	<item><term>Domains</term><description>Contains all of the domains for the database</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objDatabase
            For Each objDatabase in MyMeta.Databases
                output.writeLn objDatabase.Name
                output.writeLn objDatabase.Alias
            Next
            </code>
            JScript
            <code>
            var objDatabase;
            for (var j = 0; j &lt; MyMeta.Databases.Count; j++) 
            {
                objDatabase = MyMeta.Databases.Item(j);
                
                output.writeln(objDatabase.Name);
                output.writeln(objDatabase.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IDatabase.ExecuteSql(System.String)">
             <summary>
             This method can execute any SQL statement against your DBMS system, including SELECT, INSERT, UPDATE, DELETE and more.  
             </summary>
             <param name="sql">Raw SQL statement to be executed. Regardless of your DBMS system the result set will be converted into an ADO (pre .NET) recordset. 
             WARNING, you should test your query in your DMBS software before using.</param>
             <returns></returns>
             <remarks>
             <code>
             /* JScript taken from 'SQL_DataReplication.jgen' */
             var sql = "SELECT * FROM [" + tablename + "];";
             var rs = objDatabase.ExecuteSQL(sql);
             
             // Loop through the recordset and write out all the data into the sproc.
             if (rs != null)
             {
            	    while (!rs.Eof)
            	    {
            		    output.writeln(rs("FirstName").Value);
            		    rs.MoveNext();
                 }
            	}
            	
            	' VBScript Accessing a Firebird System Table
             dim rs
             set rs = database.ExecuteSQL("SELECT * FROM RDB$FIELDS")
            
            	If Not rs is Nothing then
                 Do
            	        For i = 0 To (rs.Fields.Count - 1)
                         output.writeLn rs(i).Name
                     Next
                     rs.MoveNext()
                 Loop Until rs.Eof
             End If
             </code>
             </remarks>
        </member>
        <member name="M:MyMeta.IDatabase.ResultColumnsFromSQL(System.String)">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IDatabase.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IDatabase.Tables">
            <summary>
            Contains all of the tables for the databaase
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Views">
            <summary>
            Contains all of the views the databaase
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Procedures">
            <summary>
            Contains all of the procedures for the databaase
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Root">
            <summary>
            A link back to the dbRoot object
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Domains">
            <summary>
            Contains all of the domains for the databaase
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Properties">
            <summary>
            The Properties for this Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Alias">
            <summary>
            You can override the physical name of the Column. If you do not provide an Alias the value of 'Column.Name' is returned.
            If your column in your DBMS is 'TXT_FIRST_NAME' you might want to give it an Alias of 'FirstName' so that your business object property will be a nice name.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IDatabase.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Name">
            <summary>
            This is the physical column name as stored in your DBMS system. See <see cref="P:MyMeta.IDatabase.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.Description">
            <summary>
            Human-readable description of the database.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.SchemaName">
            <summary>
            Unqualified schema name.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.SchemaOwner">
            <summary>
            User that owns the schemas.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.DefaultCharSetCatalog">
            <summary>
            Catalog name of the default character set for columns and domains in the schemas. 
            Blank if the provider does not support catalogs or different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.DefaultCharSetSchema">
            <summary>
            Unqualified schema name of the default character set for columns and domains in the schemas. 
            Blank if the provider does not support different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabase.DefaultCharSetName">
            <summary>
            Default character set name. Blank if the provider does not support different character sets.
            </summary>
        </member>
        <member name="M:MyMeta.Database.GetNativeType(System.Data.OleDb.OleDbType,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="oledbType"></param>
            <param name="providerTypeInt"></param>
            <param name="dataType"></param>
            <param name="length"></param>
            <param name="numericPrecision"></param>
            <param name="numericScale"></param>
            <param name="isLong"></param>
            <param name="dbTypeName"></param>
            <param name="dbTypeNameComplete"></param>
            <returns></returns>
        </member>
        <member name="T:MyMeta.IForeignKeys">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IForeignKeys.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKeys.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IForeignKeys.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKeys.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IForeignKeys.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDataAdapter">
            <summary>
            Represents a set of data commands and a database connection that are used to fill the DataSet 
            and update a VistaDB database. This class cannot be inherited. 
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.#ctor">
            <summary>
            Overloaded constructor.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.#ctor(Provider.VistaDB.VistaDBCommand)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="comm">VistaDBCommand select command object</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.#ctor(System.String,Provider.VistaDB.VistaDBConnection)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="commText">V-SQL query text</param>
            <param name="conn">VistaDBConnection object</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="commText">V-SQL query text</param>
            <param name="connString">Connectionstring to a VistaDB database</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.Finalize">
            <summary>
            VistaDBAdapter destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the RowUpdatedEventArgs class.
            </summary>
            <param name="dataRow">The DataRow used to update the data source. </param>
            <param name="command">The IDbCommand executed during the Update. </param>
            <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement. </param>
            <param name="tableMapping">A DataTableMapping object. </param>
            <returns>A new instance of the RowUpdatingEventArgs class.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the RowUpdatingEventArgs class.
            </summary>
            <param name="dataRow">The DataRow used to update the data source. </param>
            <param name="command">The IDbCommand executed during the Update. </param>
            <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement. </param>
            <param name="tableMapping">A DataTableMapping object. </param>
            <returns>A new instance of the RowUpdatingEventArgs class.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raises the RowUpdating event.
            </summary>
            <param name="value">RowUpdatingEventArgs</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raises the RowUpdated event.
            </summary>
            <param name="value">RowUpdatedEventArgs</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.CreateTableMappings">
            <summary>
            Creates a new DataTableMappingCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.Dispose(System.Boolean)">
            <summary>
            Overloaded. Releases the resources used by the component.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            
            </summary>
        </member>
        <member name="E:Provider.VistaDB.VistaDBDataAdapter.RowUpdating">
            <summary>
            Occurs during Update before a command is executed against the data source. 
            The attempt to update is made, so the event fires.
            </summary>
        </member>
        <member name="E:Provider.VistaDB.VistaDBDataAdapter.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. 
            The attempt to update is made, so the event fires.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
            <summary>
            Gets or sets the select command object.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
            <summary>
            Gets or sets the insert command object.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
            <summary>
            Gets or sets the update command object.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
            <summary>
            Gets or sets the delete command object.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.SelectCommand">
            <summary>
            Gets or sets a V-SQL statement to select records from the data set.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.InsertCommand">
            <summary>
            Gets or sets a V-SQL statement to insert records into the data set.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.UpdateCommand">
            <summary>
            Gets or sets a V-SQL statement to update records in the data set.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.DeleteCommand">
            <summary>
            Gets or sets a V-SQL statement to delete records from the data set.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataAdapter.TableMappings">
            <summary>
            Initializes a new instance of the DataTableMappingCollection class. This new instance is empty
            and does not yet contain any DataTableMapping objects.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBRowUpdatingEventHandler">
            <summary>
            Represents the method that will handle the RowUpdating event of a VistaDBDataAdapter.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBRowUpdatedEventHandler">
            <summary>
            Represents the method that will handle the RowUpdated event of a VistaDBDataAdapter.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBRowUpdatingEventArgs">
            <summary>
            Manages RowUpdating events of the VistaDB ADO.NET Data Provider.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides the data for the RowUpdating event of the VistaDB ADO.NET Data Provider.
            </summary>
            <param name="row"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
        </member>
        <member name="P:Provider.VistaDB.VistaDBRowUpdatingEventArgs.Command">
            <summary>
            Gets or sets a new instance of the VistaDBCommand class.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBRowUpdatedEventArgs">
            <summary>
            Provides data for the RowUpdated event of the VistaDB ADO.NET Data Provider.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides the data for the RowUpdating event of the VistaDB ADO.NET Data Provider.
            </summary>
            <param name="row"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
        </member>
        <member name="P:Provider.VistaDB.VistaDBRowUpdatedEventArgs.Command">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBErrorCodes">
            <summary>
            Error codes
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.QueryCannotOpen">
            <summary>
            Query cannot be opened
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.QueryNotOpened">
            <summary>
            Query is not open. No result set to work with
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ConnectionCannotBeChanged">
            <summary>
            Connection cannot be changed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ConnectionDataSourceIsEmpty">
            <summary>
            Connection.DataSource is not set
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ConnectionInvalid">
            <summary>
            Connection is invalid.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDatabaseCouldNotBeFound">
            <summary>
            Database could not be found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TableDoesNotHaveUniqueColumn">
            <summary>
            Table does not have a unique column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DatabaseNameCanNotBeChanged">
            <summary>
            DatabaseName cannot be changed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ReadOnlyCanNotBeChanged">
            <summary>
            ReadOnly cannot be changed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ExclusiveCanNotBeChanged">
            <summary>
            Exclusive cannot be changed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ParametersCanNotBeChanged">
            <summary>
            Parameters cannot be changed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DatabaseMustBeClosedBeforeCreate">
            <summary>
            Database must be closed before creating
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DatabaseCanNotBeChanged">
            <summary>
            Database cannot be changed.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TableNotInCreateMode">
            <summary>
            Table is not in Create mode
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DatabaseNotAssigned">
            <summary>
            Database is not assigned
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TableNotOpened">
            <summary>
            Table is not opened
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ObjectCannotBeActivated">
            <summary>
            VistaDB object cannot be activated
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ObjectCannotBeDeactivated">
            <summary>
            VistaDB object cannot be deactivated
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ColumnNotExist">
            <summary>
            Table column does not exist
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DatabaseNotOpened">
            <summary>
            Database is not opened
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.UnusableAccessMode">
            <summary>
            Unusable access mode
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.PropertyCannotBeChanged">
            <summary>
            Property cannot be changed while connection opened
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ConnectionNotOpened">
            <summary>
            Connection is not opened
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ServerError">
            <summary>
            Server error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DatabaseMustBeTemporary">
            <summary>
            Database must be opened as temporary
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.AliasDupe">
            <summary>
            Duplicate Alias name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.AliasLen">
            <summary>
            Alias name exceeds maximum length allowed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidAlias">
            <summary>
            Invalid Name or Alias
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CreateDatabase">
            <summary>
            Database creation error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.OpenDatabase">
            <summary>
            Database connection error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CreateTable">
            <summary>
            Table creation error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.OpenTable">
            <summary>
            Table opening error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NotADatabase">
            <summary>
            Database format error. Does not appear to be a valid .VDB database.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.MustExclusive">
            <summary>
            Database must be opened in Exclusive mode
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NotIndex">
            <summary>
            Index file format error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidSysProp">
            <summary>
            Invalid database engine property
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidColumnName">
            <summary>
            Invalid characters in Column name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DupeColumn">
            <summary>
            Duplicate Column name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ColumnNotFound">
            <summary>
            Column not found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileCreate">
            <summary>
            File creation error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileLock">
            <summary>
            File locking error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileOpen">
            <summary>
            File opening error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileOpenMode">
            <summary>
            File opening mode error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileRead">
            <summary>
            File read error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileOpenIndex">
            <summary>
            Index opening error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileWrite">
            <summary>
            File write error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidChild">
            <summary>
            Invalid child Relationships
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidType">
            <summary>
            Unsupported data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidString">
            <summary>
            Invalid Memo block size
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidRecord">
            <summary>
            Invalid Record
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidStruc">
            <summary>
            Invalid database structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NoDatabase">
            <summary>
            Invalid connection to database
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DiskSpace">
            <summary>
            Not enough disk space to sort keys
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileVDBType">
            <summary>
            Unsuitable Table driver specified
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ExprLen">
            <summary>
            Expression length exceeds maximum allowed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidParams">
            <summary>
            Expression error: Invalid number of parameters
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ExprTypChk">
            <summary>
            Expression error: Invalid type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.BadExpr">
            <summary>
            Expression evaluation error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IncompExpr">
            <summary>
            Expression is incomplete
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidDelim">
            <summary>
            Expression error: Number of delimiters is invalid
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidOp">
            <summary>
            Expression error: Operator is invalid
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ParenMismatch">
            <summary>
            Expression error: Parentheses are mismatched
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.MissinDelim">
            <summary>
            Expression error: String delimiter is missing
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.XType">
            <summary>
            Expression error: Type mismatch within function or operator parameters
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SystemError">
            <summary>
            System Error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IndexRequired">
            <summary>
            Index name is required
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IndexDuplicate">
            <summary>
            Duplicate Index name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.OutOfMemory">
            <summary>
            Memory allocation system error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.FileSpaceAlloc">
            <summary>
            Disk space allocation error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IncompatibleMode">
            <summary>
            Incompatible user mode
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InternalError">
            <summary>
            Internal error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotInitLib">
            <summary>
            Unable to initialize engine
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotInitParent">
            <summary>
            Unable to initialize thread apartment
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CreateRec">
            <summary>
            Unable to create record
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.UpdateRec">
            <summary>
            Unable to update record
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DeleteRec">
            <summary>
            Unable to delete record
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ErrorNull">
            <summary>
            Column contains Null value
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IncompVersion">
            <summary>
            Old VistaDB database format. Pack the database to update.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TPFaultToStart">
            <summary>
            Unable to start transaction
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TPFaultCommit">
            <summary>
            Transaction fault
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TPSureCommit">
            <summary>
            SureCommit forced
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.RecordVersion">
            <summary>
            Record is out of date
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TPRollback">
            <summary>
            Transaction rolled back
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NonInstLocale">
            <summary>
            Windows Locale that is not currently installed is being used for index collation
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NonSuppLocale">
            <summary>
            Unsupported Windows Locale used for index collation
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.BadTriggerType">
            <summary>
            Incorrect Trigger type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidOrder">
            <summary>
            Invalid Index order for table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongPassword">
            <summary>
            Incorrect decryption key entered
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongSymbol">
            <summary>
            Incorrect symbol
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongVarcharLength">
            <summary>
            Incorrect data length in Varchar Column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongColumnProperty">
            <summary>
            Incorrect property for Column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.PrimaryContainsNull">
            <summary>
            Primary Key index cannot contain Null values. Check Column definition.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DupKey">
            <summary>
            Duplicate key in index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.TriggerFault">
            <summary>
            Trigger fault
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ConstraintFault">
            <summary>
            Constraint fault
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.ReadOnlyFault">
            <summary>
            Unable to update. Column is Readonly
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DefaultValueFault">
            <summary>
            Unable to assign default value
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongKeySyntax">
            <summary>
            Incorrect syntax. Use\n 'Column1: Column1Value; Column2: Column2Value; ... '
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongIfElse">
            <summary>
            Then() operator expected
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NonExpectedThen">
            <summary>
            Unexpected Then() operator
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.NonExpectedElse">
            <summary>
            Unexpected Else() operator
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotSetTrigger">
            <summary>
            Unable to set Trigger
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotSetConstraint">
            <summary>
            Unable to set Constraint
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotSetFKConstraint">
            <summary>
            Unable to set Foreign Key Constraint
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotSetIdentity">
            <summary>
            Unable to set Identity
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotSetReadOnly">
            <summary>
            Unable to set read-only property
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotSetFDefaultValue">
            <summary>
            Unable to set default value for column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.WrongPKReference">
            <summary>
            Incorrect reference to Primary Key
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.BadColumnProp">
            <summary>
            Unable to set Column property
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IdentitySet">
            <summary>
            Column has an Identity
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.CannotAlterRelation">
            <summary>
            Broken relationships. Unable to alter/drop table or primary index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.InvalidColumnNameRes">
            <summary>
            Invalid Column name characters. Using a reserved word.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.MaxKeyLen">
            <summary>
            Key length exceeds maximum allowed value
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.IndexKeyColumn">
            <summary>
            Key expression contains wrong column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.DefaultValueAssigned">
            <summary>
            Unable to re-assign default value for column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.OutdatedEngine">
            <summary>
            Newer VistaDB database format detected. Update the VistaDB engine before proceeding.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFirstError">
            <summary>
            Initial SQL Error. Details to follow.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLExprParserError">
            <summary>
            SQL Parser syntax error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLInsertWrongFieldName">
            <summary>
            INSERT Column does not exist in the table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLGroupByInCongruent">
            <summary>
            Columns in GROUP BY must by specified by SELECT columns
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIsNotValidInExecSQL">
            <summary>
            Use SELECT only with ExecuteQuery method
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIsNotValidInSelect">
            <summary>
            Use UPDATE, DELETE, INSERT or CREATE TABLE with ExecuteNonQuery method
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLGetRecordInvalid">
            <summary>
            GetRecord Invalid record
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongParamsInExtract">
            <summary>
            Parameter types for Extract must be of Float or Integer
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongParamsInDateTime">
            <summary>
            Parameter types for date/time function must be of Float or Integer
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIsEmpty">
            <summary>
            SQL statement may not be empty
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongLengthInTrim">
            <summary>
            Length of trimmed character returned by TRIM() must be at least 1
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLHavingExprWrong">
            <summary>
            Incorrect expression in HAVING clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLHavingWrong">
            <summary>
            Aggregate function not found in SELECT
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCircularReference">
            <summary>
            Circular reference not allowed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinPredicateWrong">
            <summary>
            Number of tables in JOIN clause must match the number of tables in the FROM clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDataSetNotOpened">
            <summary>
            Table is not opened
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongDataSetNameInExpr">
            <summary>
            Invalid Table name in expression
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongResultSetFieldName">
            <summary>
            Invalid Column name in expression
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinExpectedDataSet">
            <summary>
            JOIN clause is incorrectly defined
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongParameters">
            <summary>
            Parameter(s) invalid for function
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongFirstArg">
            <summary>
            Argument must be alphanumeric
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDuplicatedDataSet">
            <summary>
            Duplicate Table name exists in the table list
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLColumnRepeated">
            <summary>
            Duplicate Column name exists
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLRecNoInvalid">
            <summary>
            Record number out of range
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLGroupBySelectWrong">
            <summary>
            Each Column listed in GROUP BY must exist in the SELECT clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLGroupByWrongNum">
            <summary>
            Number of Columns in GROUP differs from Columns listed in SELECT
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongTableName">
            <summary>
            Incorrect table name in format
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongIndexField">
            <summary>
            Incorrect Column index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFieldNotFound">
            <summary>
            Column was not found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinOnMustHaveDiffTables">
            <summary>
            Left and right tables in JOIN must be different
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinOnWrongRightTable">
            <summary>
            Right table in JOIN must match second table in FROM
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinOnWrongLeftTable">
            <summary>
            Left table in JOIN must match first table in FROM
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinOnWrongTableNum">
            <summary>
            Number of tables in FROM clause differs from the JOIN ON clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLSubQueryWrongCols">
            <summary>
            Subquery with more than one Column is not allowed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLSubQueryWrongTables">
            <summary>
            More than one table in FROM clause found in subquery
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongTableNumber">
            <summary>
            No Tables defined in FROM clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongFieldName">
            <summary>
            Column name not found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongDataSetName">
            <summary>
            Table does not exist
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLErrorInDBField">
            <summary>
            Error specifying a table Column
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCannotContainParams">
            <summary>
            Column may not have parameters
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLExpressionNull">
            <summary>
            Expression is empty
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLExprNotBoolean">
            <summary>
            Expression must be Boolean type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLRecordNotFound">
            <summary>
            Unable to find a record that corresponds to the expression
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLBookMarkNotFound">
            <summary>
            Bookmark not found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIndexOutOfRange">
            <summary>
            Index is out of range
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLErrorInWhere">
            <summary>
            Error in WHERE clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLParameterNotFound">
            <summary>
            Parameter not found in the list of params
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFileNotExist">
            <summary>
            (LoadFromBinaryFile) File does not exist
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDuplicateFieldName">
            <summary>
            Duplicate Column name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFieldNameNotFound">
            <summary>
            Column name not found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLBLOBFieldWrongType">
            <summary>
            Incorrect BLOB type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLReadBooleanField">
            <summary>
            Unable to read field as Boolean
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLReadFloatField">
            <summary>
            Unable to read field as Float
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLReadIntegerField">
            <summary>
            Unable to read field as Integer
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLReadStringField">
            <summary>
            Unable to read field as String
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWriteBooleanField">
            <summary>
            Unable to assign field as Boolean
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWriteFloatField">
            <summary>
            Unable to assign field as Float
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWriteIntegerField">
            <summary>
            Unable to assign field as Integer
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWriteStringField">
            <summary>
            Unable to assign field as String
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIsInvalidFloatValue">
            <summary>
            Invalid Float value
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIsInvalidIntegerValue">
            <summary>
            Invalid Integer value
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLIsInvalidBoolValue">
            <summary>
            Invalid Boolean value
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLNotAnAggregate">
            <summary>
            Column is not an aggregate type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLInvalidFieldNo">
            <summary>
            Invalid Column number
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLTransfColumnMismatch">
            <summary>
            Number of columns in SELECT mismatch in GROUP BY
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLTransfOrderByMismatch">
            <summary>
            Number of columns in SELECT mismatch in ORDER BY
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLTransWrongColumnGroup">
            <summary>
            Column order in GROUP BY must match in SELECT
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLTransfWrongColumnOrder">
            <summary>
            Column order in order BY must match in SELECT
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFailOpenFile">
            <summary>
            Failed to open or create file
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFailCreateMapping">
            <summary>
            Failed to create file mapping
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLFailMapView">
            <summary>
            Failed to map view of file
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLBeyondEof">
            <summary>
            Position beyond end of file (EOF)
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLListError">
            <summary>
            List index error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLSyntaxErrorMsg">
            <summary>
            Syntax Error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLParamsError">
            <summary>
            Params were not updated
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDuplicateAlias">
            <summary>
            Alias already exists
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLSubQueryInSelectsError">
            <summary>
            Nested subqueries are not allowed in SELECT subquery
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongParameterQuotes">
            <summary>
            Simultaneous use of both quote and double quote is not supported
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongJoin">
            <summary>
            More than one table being accessed. JOIN is required.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLSubQueryKindWrong">
            <summary>
            Use ANY or ALL in subquery, but not both
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWrongToTable">
            <summary>
            Table listed in the INTO clause does not exist
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLXQFieldNotFound">
            <summary>
            Column not found
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCaseListMissingAlias">
            <summary>
            CASE statement requires an alias
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCaseExprNotBoolean">
            <summary>
            Expression is not of Boolean type in CASE clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinNotMismatch">
            <summary>
            Tables referenced in JOIN do not correspond
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDupParamsAsFields">
            <summary>
            (ParamsAsFields) duplicate name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLJoinOptimization">
            <summary>
            Internal JOIN optimization error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCurrencyConv">
            <summary>
            Currency conversion error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLInt64Conv">
            <summary>
            In64 conversion error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDidNotReturnAres">
            <summary>
            Statement did not return a ResultSet
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCouldNotOpenTab">
            <summary>
            Unable to open table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLUnknownIdentifier">
            <summary>
            Unknown identifier
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLWhereFilter">
            <summary>
            Error setting filter for WHERE clause
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCouldNotCreateDB">
            <summary>
            Unable to create database
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCouldNotCreateTab">
            <summary>
            Unable to create table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLInvalidFieldType">
            <summary>
            Invalid Column type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCouldNotCreatePK">
            <summary>
            Unable to create primary key
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCreateConstraint">
            <summary>
            Unable to create constraint
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLOpenTableExclusive">
            <summary>
            Unable to open table in exclusive mode
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCreateIndex">
            <summary>
            Unable to create index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDropIndex">
            <summary>
            Unable to drop index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDatabaseFileName">
            <summary>
            Database does not exist
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLAlterTable">
            <summary>
            Unable to alter table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLReindexTable">
            <summary>
            Unable to reindex table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDropTable">
            <summary>
            Unable to drop table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLZapTable">
            <summary>
            Unable to delete all rows of table
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLCreateTrigger">
            <summary>
            Unable to create trigger
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLAlterTrigger">
            <summary>
            Unable to alter trigger
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLDropTrigger">
            <summary>
            Unable to drop trigger
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLInvalidInternalDB">
            <summary>
            Invalid internal database connection
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLOpen">
            <summary>
            OpenSQL error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLExec">
            <summary>
            ExecSQL error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLInternalError">
            <summary>
            Internal SQL error
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorCodes.SQLLastError">
            <summary>
            Last SQL error to report.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBErrorStruct">
            <summary>
            VistaDB error structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorStruct.errorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorStruct.errorMsg">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBErrorStruct.extraInfo">
            <summary>
            Error extra info
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBException">
            <summary>
            VistaDB exception class
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBException.IsErrorCodePresent(Provider.VistaDB.VistaDBErrorCodes)">
            <summary>
            Return True is pointed error code present
            </summary>
            <param name="errorCode">Error code</param>
            <returns>True is pointed error code present</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBException.ErrorCount">
            <summary>
            Errors count
            </summary>
            <returns>Errors count</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBException.ErrorCode(System.Int32)">
            <summary>
            Return error code by zero-based index
            </summary>
            <param name="index">Zero-based index</param>
            <returns>Error code by zero-based index</returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBException.Critical">
            <summary>
            True is error is critical
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBException.Result">
            <summary>
            Result value of function, which raised error
            </summary>
        </member>
        <member name="T:MyMeta.IParameters">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IParameters.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IParameters.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IParameters.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IParameters.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IParameters.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IViews">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IViews.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IViews.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IViews.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IViews.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IViews.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IDatabases">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IDatabases.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabases.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IDatabases.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IDatabases.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IDatabases.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.IProcedures">
            <summary>
            This is a MyMeta Collection. The only two methods meant for public consumption are Count and Item.
            </summary>
        </member>
        <member name="M:MyMeta.IProcedures.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedures.Item(System.Object)">
            <summary>
            You access items in the collect using this method. The return is the object in the collection.
            </summary>
            <param name="index">Either an integer or a string (see the remarks).
            </param>
            <remarks>
            The code below is using an IColumns collection, but all collections work the same way, the only difference is the return item.
            <list type="table">
            	<item><term>int index</term><description>A zero based integer representing positon within the collection</description></item>
            	<item><term>string index</term><description>A string that represents the physical name (not alias) of the item in the collection</description></item>///		
            </list>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </remarks>
        </member>
        <member name="P:MyMeta.IProcedures.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IProcedures.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IProcedures.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:MyMeta.ITable">
            <summary>
            ITable represents a table in your DBMS.
            </summary>
            <remarks>
            ITable Collections:
            <list type="table">
            	<item><term>Columns</term><description>Contains all of the columns for the table</description></item>
            	<item><term>ForeignKeys</term><description>Contains all of the foreign keys this table is involved in</description></item>
            	<item><term>Indexes</term><description>Contains all of the indexes for the table</description></item>
            	<item><term>PrimaryKeys</term><description>Contains all of the columns that are also primary keys, this is an IColumns collection</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all Tables with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objTable
            For Each objTable in objDatabase.Tables
                output.writeLn objTable.Name
                output.writeLn objTable.Alias
            Next
            </code>
            JScript
            <code>
            var objTable;
            for (var j = 0; j &lt; objDatabase.Tables.Count; j++) 
            {
                objColumn = objDatabase.Tables.Item(j);
                
                output.writeln(objTable.Name);
                output.writeln(objTable.Alias);
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.ITable.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.ITable.Columns">
            <summary>
            The Columns collection for this table in ordinal order. See <see cref="T:MyMeta.IColumn"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.ForeignKeys">
            <summary>
            The ForeignKeys for this table. See <see cref="P:MyMeta.ITable.ForeignKeys"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Indexes">
            <summary>
            The Indexes for this table. See <see cref="T:MyMeta.IIndex"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.PrimaryKeys">
            <summary>
            The PrimaryKeys for this table. This is really just a Column collection containing only the Columns which are primary keys. See <see cref="T:MyMeta.IColumn"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Properties">
            <summary>
            The Properties for this table. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.GlobalProperties">
            <summary>
            The Properties for all Tables within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.ITable.Properties"/> (local) collection and the <see cref="P:MyMeta.ITable.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Database">
            <summary>
            Parent Database of this Table
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Alias">
            <summary>
            You can override the physical name of the Table. If you do not provide an Alias the value of 'Table.Name' is returned.
            If your table in your DBMS is 'Q99AAB' you might want to give it an Alias of 'Employees' so that your business object names will make sense.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.ITable.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Name">
            <summary>
            This is the physical table name as stored in your DBMS system. See <see cref="P:MyMeta.ITable.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Schema">
            <summary>
            This is the schema of the Table.
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Type">
             <summary>
             The table type, 'TABLE' if not provided.
             </summary>
             <remarks>
            
             <list type="bullet">
            		<item>ALIAS</item>
            		<item>TABLE</item>
            		<item>SYNONYM</item>
            		<item>SYSTEM TABLE</item>
            		<item>GLOBAL TEMPORARY</item>
            		<item>LOCAL TEMPORARY</item>		
             </list>
            
            </remarks>
        </member>
        <member name="P:MyMeta.ITable.Guid">
            <summary>
            Tab;e GUID. For Providers that do not use GUIDs to identify tables 'Guid.Empty' is returned.
            </summary>
        </member>
        <member name="P:MyMeta.ITable.Description">
            <summary>
            Human-readable description of the table. Blank if there is no description associated with the table.
            </summary>
        </member>
        <member name="P:MyMeta.ITable.PropID">
            <summary>
            Column property ID. For Providers that do not associate PROPIDs with columns 0 is returned.
            </summary>
        </member>
        <member name="P:MyMeta.ITable.DateCreated">
            <summary>
            Date when the table was created or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="P:MyMeta.ITable.DateModified">
            <summary>
            Date when the table definition was last modified or '1/1/0001' if the provider does not have this information. 
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBTransaction">
            <summary>
            Represents a VistaDB transaction to be made in a VistaDB database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTransaction.Commit">
            <summary>
            Commit the current transaction level.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTransaction.Rollback">
            <summary>
            Rollback all changes and discard the transaction.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTransaction.IsolationLevel">
            <summary>
            Gets the transaction isolation level. VistaDB always uses snapshot isolation.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTransaction.Connection">
            <summary>
            Gets the current connection object.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBParameter">
            <summary>
            Represents a parameter to a VistaDBCommand
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.#ctor(System.String,Provider.VistaDB.VistaDBType)">
            <summary>
            Constructor
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="type">Parameter data type</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.#ctor(System.String,Provider.VistaDB.VistaDBType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="type">Parameter data type</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.#ctor(System.String,Provider.VistaDB.VistaDBType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="dbType">VistaDBType type of the parameter.</param>
            <param name="size">maximum size, in bytes, of the data within the column.</param>
            <param name="direction">ParameterDirection.</param>
            <param name="isNullable">Indicates whether the parameter accepts null values.</param>
            <param name="precision">Maximum number of digits used to represent the Value property.</param>
            <param name="scale">Number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">Name of the source column that is mapped to the DataSet and used for loading or returning the Value.</param>
            <param name="sourceVersion">DataRowVersion to use when loading Value.</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.Clone">
            <summary>
            Creates a new VistaDBParameter object.
            </summary>
            <returns>New VistaDBParameter object</returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.DbType">
            <summary>
            Gets or sets the parameter type.
            </summary>
            <remarks>Provided for compatibility with Sql's DbType. Use VistaDBType</remarks>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.VistaDBType">
            <summary>
            Gets or sets the VistaDBType parameter.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only, output-only or bidirectional return value parameter.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.ParameterName">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped to the DataSet and used for loading or returning the Value.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.SourceVersion">
            <summary>
            Gets or sets the DataRowVersion to use when loading Value.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the Value property.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which Value is resolved.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBParameter.VDBParameterConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <remarks>
            VistaDB type converter is used to convert values between data types, and to assist property configuration 
            at design time by providing text-to-value conversion or a drop-down list of values to select from. 
            </remarks>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.VDBParameterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameter.VDBParameterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overloaded. Converts the given value object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed. </param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns></returns>
        </member>
        <member name="T:Provider.VistaDB.VistaDBRemoteQuery">
            <summary>
            Summary description for VistaDBRemoteQuery.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBSQLQuery">
            <summary>
            V-SQL query class
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.DropQuery">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.Open">
            <summary>
            Open a V-SQL query. Open is used with SELECT statements only.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.Close">
            <summary>
            Close a V-SQL query.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.ExecSQL">
            <summary>
            Execute a V-SQL query that does not return a result set. These include INSERT, DELETE and UPDATE.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.SetParameter(System.String,Provider.VistaDB.VistaDBType,System.Object)">
            <summary>
            Set a V-SQL parameter.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="dataType">Parameter data type.</param>
            <param name="value">Data value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.ParamIsNull(System.String)">
            <summary>
            Returns True if the V-SQL parameter value is NULL.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.SetParamNull(System.String,Provider.VistaDB.VistaDBType)">
            <summary>
            Set a V-SQL parameter value to NULL.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.First">
            <summary>
            Go to the first row in the dataset.
            </summary>
            <returns>False if current position doesn't change</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.Next">
            <summary>
            Go to the next row in dataset
            </summary>
            <returns>False if current position doesn't change</returns>
        </member>
        <member name="F:Provider.VistaDB.VistaDBSQLQuery.Columns">
            <summary>
            Column objects in the collection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLQuery.GetValue(System.Int32)">
            <summary>
            Returns the value of the column at the given position in the table schema. The first column is 1.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.Opened">
            <summary>
            Returns if the V-SQL query has been opened. Applies to SELECT statements only.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.Eof">
            <summary>
            End of file. Tests if a row movement function has placed the row pointer beyond the last row in the dataset.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.RowsAffected">
            <summary>
            Return the number of rows affected.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.ColumnCount">
            <summary>
            Return the column count for the V-SQL query.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.RecordCount">
            <summary>
            Returns the number of records retrieved by the last V-SQL query statement. Applies to SELECT.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.SQL">
            <summary>
            Gets or sets the V-SQL query statement to be executed.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBSQLQuery.VistaDBColumnCollection">
            <summary>
            The collection of column objects in the V-SQL query.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.VistaDBColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column object at the specified offset.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLQuery.VistaDBColumnCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
        </member>
        <member name="T:MyMeta.dbRoot">
             <summary>
             MyMeta is the root of the MyMeta meta-data. MyMeta is an intrinsic object available to your script and configured based on the settings
             you have entered in the Default Settings dialog. It is already connected before you script execution begins.
             </summary>
             <remarks>
            	MyMeta has 1 Collection:
             <list type="table">
            		<item><term>Databases</term><description>Contains a collection of all of the databases in your system</description></item>
            	</list>
             There is a property collection on every entity in your database, you can add key/value
             pairs to the User Meta Data either through the user interface of MyGeneration or 
             programmatically in your scripts.  User meta data is stored in XML and never writes to your database.
            
             This can be very useful, you might need more meta data than MyMeta supplies, in fact,
             MyMeta will eventually offer extended meta data using this feature as well. The current plan
             is that any extended data added via MyGeneration will have a key that beings with "MyMeta.Something"
             where 'Something' equals the description. 
             </remarks>
             <example>
            	VBScript - ****** NOTE ****** You never have to actually write this code, this is for education purposes only.
            	<code>
            	MyMeta.Connect "SQL", "Provider=SQLOLEDB.1;Persist Security Info=True;User ID=sa;Data Source=localhost"
            	
            	MyMeta.DbTarget	= "SqlClient"
            	MyMeta.DbTargetMappingFileName = "C:\Program Files\MyGeneration\Settings\DbTargets.xml"
            	
             MyMeta.Language = "VB.NET"
             MyMeta.LanguageMappingFileName = "C:\Program Files\MyGeneration\Settings\Languages.xml"
             
             MyMeta.UserMetaDataFileName = "C:\Program Files\MyGeneration\Settings\UserMetaData.xml"
             </code>
            	JScript - ****** NOTE ****** You never have to actually write this code, this is for education purposes only.
            	<code>
            	MyMeta.Connect("SQL", "Provider=SQLOLEDB.1;Persist Security Info=True;User ID=sa;Data Source=localhost")
            	
            	MyMeta.DbTarget	= "SqlClient";
            	MyMeta.DbTargetMappingFileName = "C:\Program Files\MyGeneration\Settings\DbTargets.xml";
            	
             MyMeta.Language = "VB.NET";
             MyMeta.LanguageMappingFileName = "C:\Program Files\MyGeneration\Settings\Languages.xml";
             
             MyMeta.UserMetaDataFileName = "C:\Program Files\MyGeneration\Settings\UserMetaData.xml";
             </code>
             The above code is done for you long before you execute your script and the values come from the Default Settings Dialog.
             However, you can override these defaults as many of the sample scripts do. For instance, if you have a script that is for SqlClient
             only go ahead and set the MyMeta.DbTarget in your script thus overriding the Default Settings.
             </example>
        </member>
        <member name="M:MyMeta.dbRoot.Connect(System.String,System.String)">
            <summary>
            This is how you connect to your DBMS system using MyMeta. This is already called for you before your script beings execution.
            </summary>
            <param name="driver">A string as defined in the remarks below</param>
            <param name="connectionString">A valid connection string for you DBMS</param>
            <returns>True if connected, False if not</returns>
            <remarks>
            These are the supported "drivers".
            <list type="table">
            	<item><term>"ACCESS"</term><description>Microsoft Access 97 and higher</description></item>
            	<item><term>"DB2"</term><description>IBM DB2</description></item>	
            	<item><term>"MYSQL"</term><description>Currently limited to only MySQL running on Microsoft Operating Systems</description></item>
            	<item><term>"MYSQL2"</term><description>Uses MySQL Connector/Net, Supports 4.x schema info on Windows or Linux</description></item>
            	<item><term>"ORACLE"</term><description>Oracle 8i - 9</description></item>
            	<item><term>"SQL"</term><description>Microsoft SQL Server 2000 and higher</description></item>	
            	<item><term>"PERVASIVE"</term><description>Pervasive 9.00+ (might work on lower but untested)</description></item>		
            	<item><term>"POSTGRESQL"</term><description>PostgreSQL 7.3+ (might work on lower but untested)</description></item>		
            	<item><term>"POSTGRESQL8"</term><description>PostgreSQL 8.0+</description></item>	
            	<item><term>"FIREBIRD"</term><description>Firebird</description></item>		
            	<item><term>"INTERBASE"</term><description>Borland's InterBase</description></item>		
            	<item><term>"SQLITE"</term><description>SQLite</description></item>		
            	<item><term>"VISTADB"</term><description>VistaDB Database</description></item>		
            	<item><term>"ADVANTAGE"</term><description>Advantage Database Server</description></item>	
            	<item><term>"ISERIES"</term><description>iSeries (AS400)</description></item>	
            </list>
            Below are some sample connection strings. However, the "Data Link" dialog available on the Default Settings dialog can help you.
            <list type="table">
            	<item><term>"ACCESS"</term><description>Provider=Microsoft.Jet.OLEDB.4.0;Data Source=c:\access\newnorthwind.mdb;User Id=;Password=</description></item>
            	<item><term>"DB2"</term><description>Provider=IBMDADB2.1;Password=sa;User ID=DB2Admin;Data Source=MyMeta;Persist Security Info=True</description></item>	
            	<item><term>"MYSQL"</term><description>Provider=MySQLProv;Persist Security Info=True;Data Source=test;UID=griffo;PWD=;PORT=3306</description></item>
            	<item><term>"MYSQL2"</term><description>Uses Database=Test;Data Source=Griffo;User Id=anonymous;</description></item>
            	<item><term>"ORACLE"</term><description>Provider=OraOLEDB.Oracle.1;Password=sa;Persist Security Info=True;User ID=GRIFFO;Data Source=dbMeta</description></item>
            	<item><term>"SQL"</term><description>Provider=SQLOLEDB.1;Persist Security Info=False;User ID=sa;Initial Catalog=Northwind;Data Source=localhost</description></item>
            	<item><term>"PERVASIVE"</term><description>Provider=PervasiveOLEDB.8.60;Data Source=demodata;Location=Griffo;Persist Security Info=False</description></item>		
            	<item><term>"POSTGRESQL"</term><description>Server=www.myserver.com;Port=5432;User Id=myuser;Password=aaa;Database=mygeneration;</description></item>		
            	<item><term>"POSTGRESQL8"</term><description>Server=www.myserver.com;Port=5432;User Id=myuser;Password=aaa;Database=mygeneration;</description></item>		
            	<item><term>"FIREBIRD"</term><description>Database=C:\firebird\EMPLOYEE.GDB;User=SYSDBA;Password=wow;Dialect=3;Server=localhost</description></item>		
            	<item><term>"INTERBASE"</term><description>Database=C:\interbase\EMPLOYEE.GDB;User=SYSDBA;Password=wow;Dialect=3;Server=localhost</description></item>		
            	<item><term>"SQLITE"</term><description>Data Source=C:\SQLite\employee.db;New=False;Compress=True;Synchronous=Off;Version=3</description></item>		
            	<item><term>"VISTADB"</term><description>DataSource=C:\Program Files\VistaDB 2.0\Data\Northwind.vdb</description></item>		
            	<item><term>"ADVANTAGE"</term><description>Provider=Advantage.OLEDB.1;Password="";User ID=AdsSys;Data Source=C:\task1;Initial Catalog=aep_tutorial.add;Persist Security Info=True;Advantage Server Type=ADS_LOCAL_SERVER;Trim Trailing Spaces=TRUE</description></item>		
            	<item><term>"ISERIES"</term><description>PROVIDER=IBMDA400; DATA SOURCE=MY_SYSTEM_NAME;USER ID=myUserName;PASSWORD=myPwd;DEFAULT COLLECTION=MY_LIBRARY;</description></item>		
            </list>
            </remarks>
        </member>
        <member name="M:MyMeta.dbRoot.Connect(MyMeta.dbDriver,System.String)">
            <summary>
            Same as <see cref="M:MyMeta.dbRoot.Connect(System.String,System.String)"/>(string, string) only this uses an enumeration.  
            </summary>
            <param name="driver">The driver enumeration for you DBMS system</param>
            <param name="connectionString">A valid connection string for you DBMS</param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.dbRoot.Connect(MyMeta.dbDriver,System.String,System.String)">
            <summary>
            Same as <see cref="M:MyMeta.dbRoot.Connect(System.String,System.String)"/>(string, string) only this uses an enumeration.  
            </summary>
            <param name="driver">The driver enumeration for you DBMS system</param>
            <param name="pluginName">The name of the plugin</param>
            <param name="connectionString">A valid connection string for you DBMS</param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.dbRoot.PluginSpecificData(System.String,System.String)">
            <summary>
            If you want to fetch data specific to a given plugin, you can get generic info here.
            </summary>
            <param name="providerName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.dbRoot.GetConnectionFromPlugin(System.String,System.String)">
            <summary>
            A Plugin ConnectionString is a special feature for external assemblies.
            </summary>
            <param name="connectionString">Sample: PluginName;Provider=SQLOLEDB.1;Persist Security Info=True;User ID=sa;Data Source=localhost</param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.dbRoot.GetConnectionFromPlugin(System.String,System.String,MyMeta.IMyMetaPlugin@)">
            <summary>
            A Plugin ConnectionString is a special feature for external assemblies.
            </summary>
            <param name="pluginConnectionString">Sample: PluginName;Provider=SQLOLEDB.1;Persist Security Info=True;User ID=sa;Data Source=localhost</param>
            <param name="plugin">Returns the plugin object.</param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.dbRoot.SaveUserMetaData">
            <summary>
            Call this method to save any user defined meta data that you may have modified. See <see cref="P:MyMeta.dbRoot.UserMetaDataFileName"/>
            </summary>
            <returns>True if saved, False if not</returns>
        </member>
        <member name="M:MyMeta.dbRoot.GetLanguageMappings">
            <summary>
            Returns all of the languages currently configured for the DBMS set when Connect was called.
            </summary>
            <returns>An array with all of the possible languages.</returns>
        </member>
        <member name="M:MyMeta.dbRoot.GetLanguageMappings(System.String)">
            <summary>
            Returns all of the languages for a given driver, regardless of MyMeta's current connection
            </summary>
            <returns>An array with all of the possible languages.</returns>
        </member>
        <member name="M:MyMeta.dbRoot.GetDbTargetMappings">
            <summary>
            Returns all of the dbTargets currently configured for the DBMS set when Connect was called.
            </summary>
            <returns>An array with all of the possible dbTargets.</returns>
        </member>
        <member name="M:MyMeta.dbRoot.GetDbTargetMappings(System.String)">
            <summary>
            Returns all of the dbTargets for a given driver, regardless of MyMeta's current connection
            </summary>
            <returns>An array with all of the possible dbTargets.</returns>
        </member>
        <member name="P:MyMeta.dbRoot.Databases">
            <summary>
            Contains all of the databases in your DBMS system.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.DefaultDatabase">
            <summary>
            This is the default database as defined in your connection string, or if not provided your DBMS system may provide one.
            Finally, for single database systems like Microsoft Access it will be the default database.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.IsConnected">
            <summary>
            True if MyMeta has been successfully connected to your DBMS, False if not.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.Driver">
            <summary>
            Returns MyMeta's current dbDriver enumeration value as defined by its current connection.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.DriverString">
            <summary>
            Returns MyMeta's current DriverString as defined by its current connection.
            </summary>
            <remarks>
            These are the current possible values.
            <list type="table">
            	<item><term>"ACCESS"</term><description>Microsoft Access 97 and higher</description></item>
            	<item><term>"DB2"</term><description>IBM DB2</description></item>	
            	<item><term>"MYSQL"</term><description>Currently limited to only MySQL running on Microsoft Operating Systems</description></item>
            	<item><term>"ORACLE"</term><description>Oracle 8i - 9</description></item>
            	<item><term>"SQL"</term><description>Microsoft SQL Server 2000 and higher</description></item>	
            	<item><term>"PostgreSQL"</term><description>PostgreSQL</description></item>	///		
            </list>
            </remarks>
        </member>
        <member name="P:MyMeta.dbRoot.ConnectionString">
            <summary>
            Returns the current connection string. ** WARNING ** Currently the password is returned, the password will be stripped from this
            property in the very near future.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.ShowSystemData">
            <summary>
            Determines whether system tables and views and alike are shown, the default is False. If True, ONLY system data is shown.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.ShowDefaultDatabaseOnly">
            <summary>
            Only show the default database in the databases collection.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.DomainOverride">
            <summary>
            If this is true then four IColumn properties are actually supplied by the Domain, if the Column has an IDomain. 
            The four properties are DataTypeName, DataTypeNameComplete, LanguageType, and DbTargetType.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.UserMetaDataFileName">
            <summary>
            The full path of the XML file that contains the user defined meta data. See IPropertyCollection
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.LanguageMappingFileName">
            <summary>
            The full path of the XML file that contains the language mappings. The data in this file plus the value you provide 
            to <see cref="P:MyMeta.dbRoot.Language"/> determine the value of IColumn.Language.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.Language">
            <summary>
            Use this to choose your Language, for example, "C#". See <see cref="P:MyMeta.dbRoot.LanguageMappingFileName"/> for more information
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.DbTargetMappingFileName">
            <summary>
            The full path of the XML file that contains the DbTarget mappings. The data in this file plus the value you provide 
            to <see cref="P:MyMeta.dbRoot.DbTarget"/> determine the value of IColumn.DbTarget.
            </summary>
        </member>
        <member name="P:MyMeta.dbRoot.DbTarget">
            <summary>
            Use this to choose your DbTarget, for example, "SqlClient". See <see cref="P:MyMeta.dbRoot.DbTargetMappingFileName"/>  for more information
            </summary>
        </member>
        <member name="T:MyMeta.dbDriver">
            <summary>
            The current list of support dbDrivers. Typically VBScript and JScript use the string version as defined by MyMeta.DriverString.
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.SQL">
            <summary>
            String form is "SQL" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Oracle">
            <summary>
            String form is "ORACLE" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Access">
            <summary>
            String form is "ACCESS" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.MySql">
            <summary>
            String form is "MYSQL" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.MySql2">
            <summary>
            String form is "MYSQL" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.DB2">
            <summary>
            String form is "DB2" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.ISeries">
            <summary>
            String form is "ISeries" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Pervasive">
            <summary>
            String form is "PERVASIVE" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.PostgreSQL">
            <summary>
            String form is "POSTGRESQL" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.PostgreSQL8">
            <summary>
            String form is "POSTGRESQL8" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Firebird">
            <summary>
            String form is "FIREBIRD" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Interbase">
            <summary>
            String form is "INTERBASE" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.SQLite">
            <summary>
            String form is "SQLITE" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.VistaDB">
            <summary>
            String form is "VISTADB" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Advantage">
            <summary>
            String form is "ADVANTAGE" for DriverString property
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.Plugin">
            <summary>
            This is a placeholder for plugin providers
            </summary>
        </member>
        <member name="F:MyMeta.dbDriver.None">
            <summary>
            Use this if you want know connection at all
            </summary>
        </member>
        <member name="T:MyMeta.IColumn">
            <summary>
            IColumn represents a column or field in your DBMS. IColumn is used to represent columns for both Tables and Views.
            </summary>
            <remarks>
            IColumn Collections:
            <list type="table">
            	<item><term>ForeignKeys</term><description>Contains all of the foreign keys this column plays a role in</description></item>
            	<item><term>Properties</term><description>A collection that can hold key/value pairs of your choosing</description></item>
            	<item><term>GlobalProperties</term><description>A collection that can hold key/value pairs of your choosing for all Columns with the same Database</description></item>
            	<item><term>AllProperties</term><description>A collection that combines the Properties and GlobalProperties Collections</description></item>
            </list>
            </remarks>
            <example>
            VBScript
            <code>
            Dim objColumn
            Set objColumn = objTable.Columns.Item(5)
            Set objColumn = objTable.Columns.Item("FirstName")
            
            ' Loop through the collection
            For Each objColumn in objTable.Columns
                output.writeLn objColumn.Name
                output.writeLn objColumn.Alias
                output.writeLn objColumn.DataTypeNam
            Next
            </code>
            JScript
            <code>
            var objColumn;
            objColumn = objTable.Columns.Item(5);
            objColumn = objTable.Columns.Item("FirstName");
            
            for (var j = 0; j &lt; objTable.Columns.Count; j++) 
            {
                objColumn = objTable.Columns.Item(j);
                
                output.writeln(objColumn.Name);
                output.writeln(objColumn.Alias);
                output.writeln(objColumn.DataTypeName);				
            }
            </code>
            </example>
        </member>
        <member name="M:MyMeta.IColumn.DatabaseSpecificMetaData(System.String)">
            <summary>
            Fetch any database specific meta data through this generic interface by key. The keys will have to be defined by the specific database provider
            </summary>
            <param name="key">A key identifying the type of meta data desired.</param>
            <returns>A meta-data object or collection.</returns>
        </member>
        <member name="P:MyMeta.IColumn.Table">
            <summary>
            The parent ITable of this Column, null if the parent is a View.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.View">
            <summary>
            The parent IView of this Column, null if the parent is a Table. 
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Domain">
            <summary>
            The domain of this Column, null if this columns type isn't derived from a domain. 
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.ForeignKeys">
            <summary>
            The ForeignKeys that this Column participates in. See <see cref="P:MyMeta.IColumn.ForeignKeys"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Properties">
            <summary>
            The Properties (Local) for this column. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window.
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.GlobalProperties">
            <summary>
            The Properties for all Columns within the same Database. These are user defined and are typically stored in 'UserMetaData.xml' unless changed in the Default Settings dialog.
            Properties consist of key/value pairs.  You can populate this collection during your script or via the Dockable window. 
            To save any data added to this collection call MyMeta.SaveUserMetaData(). See <see cref="T:MyMeta.IProperty"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.AllProperties">
            <summary>
            AllProperties is essentially a read-only collection consisting of a combination of both the <see cref="P:MyMeta.IColumn.Properties"/> (local) collection and the <see cref="P:MyMeta.IColumn.GlobalProperties"/> (global) collection. The local properties are added first, 
            and then the global properties are added however, only global properties for which no local property exists -- are added. This makes local properties overlay global properties. Global properties can
            act as a default value which can be overridden by a local property. See <see cref="T:MyMeta.IProperty"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Alias">
            <summary>
            You can override the physical name of the Column. If you do not provide an Alias the value of 'Column.Name' is returned.
            If your column in your DBMS is 'TXT_FIRST_NAME' you might want to give it an Alias of 'FirstName' so that your business object property will be a nice name.
            You can provide an Alias the User Meta Data window. You can also set this during a script and then call MyMeta.SaveUserMetaData().
            See <see cref="P:MyMeta.IColumn.Name"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Name">
            <summary>
            This is the physical column name as stored in your DBMS system. See <see cref="P:MyMeta.IColumn.Alias"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DataType">
            <summary>
            The OLEDB data type value see (http://msdn.microsoft.com/library/default.asp?url=/library/en-us/oledb/htm/olprappendixa_1.asp)
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DataTypeName">
            <summary>
            The native data type as stored in your DBMS system, for instance a SQL 'nvarchar', or Access 'Memo'. See <see cref="P:MyMeta.IColumn.DataTypeNameComplete"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DataTypeNameComplete">
            <summary>
            This is the full data type name, whereas the DataType property might be 'nvarchar' the DataTypeName property would be 'nvarchar(200)', this varies from DBMS to DBMS.
            See <see cref="P:MyMeta.IColumn.DataTypeName"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.LanguageType">
            <summary>
            The Language Mappings window is where these are entered and they are stored in 'Languages.xml'. 
            If your DMBS system is Microsoft SQL and your language is C# then nvarchar will be mapped to a C# 'string'. 
            Anytime that you need to expose this columns value to your programming language use this value.
            See <see cref="P:MyMeta.IColumn.DbTargetType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DbTargetType">
            <summary>
            The DbTarget Mappings window is where these are entered and they are stored in 'DbTargets.xml'. 
            If your DMBS system is Microsoft SQL and your DbDriver is 'SqlClient' then nvarchar will be mapped to a SqlCleint 'SqlDbType.NVarChar'.
            See <see cref="P:MyMeta.IColumn.LanguageType"/>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Guid">
            <summary>
            Column GUID. For Providers that do not use GUIDs to identify columns 'Guid.Empty' is returned.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.PropID">
            <summary>
            Column property ID. For Providers that do not associate PROPIDs with columns 0 is returned.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Ordinal">
            <summary>
            The ordinal of the column. Columns are numbered starting from one.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.HasDefault">
            <summary>
            If 'True' the column has a default value. If 'False' the column does not have a default value, or it is unknown whether the column has a default value.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Default">
            <summary>
            The actual unparsed default from your DBMS system, for instance in SQL server it might be 'getdate()' for a DateTime field or N'USA' for Country.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Flags">
            <summary>
            A bitmask that describes column characteristics. The DBCOLUMNFLAGS enumerated type specifies the bits in the bitmask. For information about DBCOLUMNFLAGS, see IColumnsInfo::GetColumnInfo in the reference section. 
            If COLUMN_NAME refers to a column in a table or view that is updatable, one of either DBCOLUMNFLAGS_WRITE or DBCOLUMNFLAGS_WRITEUNKNOWN should be set. 
            For more information about these flags, see "DBCOLUMNFLAGS Enumerated Type.
            See (http://msdn.microsoft.com/library/default.asp?url=/library/en-us/oledb/htm/olprirowsetchange_2.asp)
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.IsNullable">
            <summary>
            The Column allows null in your DBMS system.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.TypeGuid">
            <summary>
            The GUID of the column's data type. For Providers that do not use GUIDs to identify data types 'Guid.Empty' is returned.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.CharacterMaxLength">
            <summary>
            The maximum possible length of a value in the column. For character, binary, or bit columns, this is one of the following: 
            <list type="bullet">
            <item>
            The maximum length of the column in characters, bytes, or bits, respectively, if one is defined. For example, a CHAR(5) column in an SQL table has a maximum length of 5. 
            </item>
            <item>
            The maximum length of the data type in characters, bytes, or bits, respectively, if the column does not have a defined length. 
            </item>
            <item>
            Zero (0) if neither the column nor the data type has a defined maximum length.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.CharacterOctetLength">
            <summary>
            Maximum length in octets (bytes) of the column, if the type of the column is character or binary. Zero for all other types of columns.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.NumericPrecision">
            <summary>
            If the column's data type is of a numeric data type other than VARNUMERIC, this is the maximum precision of the column. 
            The precision of columns with a data type of DBTYPE_DECIMAL or DBTYPE_NUMERIC depends on the definition of the column. 
            For the precision of all other numeric data types, see (http://msdn.microsoft.com/library/en-us/oledb/htm/olprappendixa_2.asp) "Precision of Numeric Data Types" in Appendix A.
            If the column's data type is not numeric or is VARNUMERIC, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.NumericScale">
            <summary>
            If the column's type indicator is DBTYPE_DECIMAL, DBTYPE_NUMERIC, or DBTYPE_VARNUMERIC, 
            this is the number of digits to the right of the decimal point. Otherwise, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DateTimePrecision">
            <summary>
            Datetime precision (number of digits in the fractional seconds portion) of the column if the column is a datetime or interval type. If the column's data type is not datetime, this is zero.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.CharacterSetCatalog">
            <summary>
            Catalog name in which the character set is defined. Blank if the provider does not support catalogs or different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.CharacterSetSchema">
            <summary>
            Unqualified schema name in which the character set is defined. Blank if the provider does not support schemas or different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.CharacterSetName">
            <summary>
            Character set name. Blank if the provider does not support different character sets.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DomainCatalog">
            <summary>
            Catalog name in which the domain is defined. Blank if the provider does not support catalogs or domains.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DomainSchema">
            <summary>
            Unqualified schema name in which the domain is defined. Blank if the provider does not support schemas or domains.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.DomainName">
            <summary>
            Domain name. Blank if the provider does not support domains.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.Description">
            <summary>
            Human-readable description of the column. For example, the description for a column named Name in the Employee table might be "Employee name." 
            Blank if this column is not supported by the provider, or if there is no description associated with the column.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.LCID">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.CompFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.SortID">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.TDSCollation">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.IsComputed">
            <summary>
            'True' if this Column is a computed column and/or derived from a formula. Typically, this means don't try and update.  'False' it is either not computed or unknowable.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.IsInPrimaryKey">
            <summary>
            'True' if this column is part of all of the tables primary key, 'False' if not.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.IsAutoKey">
            <summary>
            'True' if this column is an auto-incremented value.  
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.IsInForeignKey">
            <summary>
            'True' if this Column is involved in a least one ForeignKey.  
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.AutoKeySeed">
            <summary>
            The starting value of the AutoKey (Identity, Sequence, or Generator) associated with this Column.
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.AutoKeyIncrement">
            <summary>
            Returns the incrementing value associated with the AutoKey. 
            </summary>
        </member>
        <member name="P:MyMeta.IColumn.HasDomain">
            <summary>
            True if this Column has a domain
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a VistaDBCommand as well as their 
            respective mappings to columns in a DataSet. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Contains(System.String)">
            <summary>
            Overloaded. Gets a value indicating whether a VistaDBParameter exists in the collection.
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.IndexOf(System.String)">
            <summary>
            Overloaded. Gets the location of a VistaDBParameter in the collection.
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.RemoveAt(System.String)">
            <summary>
            Overloaded. Removes the specified VistaDBParameter from the collection.
            </summary>
            <param name="parameterName">Parameter name</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Add(System.Object)">
            <summary>
            Overloaded. Adds a VistaDBParameter to the VistaDBParameterCollection.
            </summary>
            <param name="value">The VistaDBParameter to add to the collection.</param>
            <returns>The index of the new VistaDBParameter object.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Add(Provider.VistaDB.VistaDBParameter)">
            <summary>
            Overloaded. Adds a VistaDBParameter to the VistaDBParameterCollection.
            </summary>
            <param name="value">The VistaDBParameter to add to the collection. </param>
            <returns>VistaDBParameter</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Add(System.String,Provider.VistaDB.VistaDBType)">
            <summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection given the specified parameter name and type.
            </summary>
            <param name="parameterName">The name of the VistaDBParameter parameter.</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value of the VistaDBParameter to add to the collection. </param>
            <returns>The index of the new VistaDBParameter object.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Add(System.String,Provider.VistaDB.VistaDBType,System.String)">
            <summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection with the parameter name, the data type, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter. </param>
            <param name="dbType">One of the VistaDBType values. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <returns>The index of the new VistaDBParameter object.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator for VistaDBParameterCollection object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether a VistaDBParameter exists in the collection.
            </summary>
            <param name="value">The value of the VistaDBParameter object to find. </param>
            <returns>True if the collection contains the VistaDBParameter object; otherwise, False.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of a VistaDBParameter in the collection.
            </summary>
            <param name="value">The VistaDBParameter object to locate.</param>
            <returns>The zero-based location of the VistaDBParameter in the collection.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a VistaDBParameter into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="value">The VistaDBParameter to add to the collection.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified VistaDBParameter from the collection.
            </summary>
            <param name="value">A VistaDBParameter object to remove from the collection.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified VistaDBParameter from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter.</param>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.Count">
            <summary>
            Gets the number of VistaDBParameter objects in the collection.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.Item(System.String)">
            <summary>
            Gets the VistaDBParameter with the specified name.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterCollection.Item(System.Int32)">
            <summary>
            Gets the VistaDBParameter at the specified index.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBColumn">
            <summary>
            Table column definition.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.VistaDBType">
            <summary>
            VistaDBType for the column.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Type">
            <summary>
            Column type.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.DataSize">
            <summary>
            Physical size of column. 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.ColumnWidth">
            <summary>
            Returns the column width. Useful for Varchar and Character column types.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.ColumnDecimals">
            <summary>
            Returns the column decimals.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.AllowNull">
            <summary>
            Returns true if column can store NULL values.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.ReadOnly">
            <summary>
            Returns true if the column is readonly.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.PrimaryKey">
            <summary>
            Returns true if the column participates in the Primary Key index.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Unique">
            <summary>
            Returns true if the column participates in the Unique index
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Identity">
            <summary>
            Returns true if the column is an Identity field.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.IdentityStep">
            <summary>
            Returns increment step for identity
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.IdentityValue">
            <summary>
            Returns current value for identity
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.ColumnCaption">
            <summary>
            Returns the Caption for the column.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.ColumnDescription">
            <summary>
            Returns the column description
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.ReservedWord">
            <summary>
            Returns true if column name is reserved word
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Packed">
            <summary>
            Return true if column is packed
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Hidden">
            <summary>
            Return true if column marked as hidden
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Encrypted">
            <summary>
            Return encrypted if column encrypted
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBColumn.Unicode">
            <summary>
            Not supported property. Always return false.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBSQLConnection">
            <summary>
            VistaDBSQL class for managing V-SQL query statements.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.OpenDatabaseConnection">
            <summary>
            Open a database connection to a VistaDB database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.CloseDatabaseConnection">
            <summary>
            Close an active database connection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.NewSQLQuery">
            <summary>
            Create new query for this connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.BeginTransaction">
            <summary>
            Begin a transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.CommitTransaction">
            <summary>
            Commit an active transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBSQLConnection.RollbackTransaction">
            <summary>
            Rollback the active transaction. Transactions may be nested. 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLConnection.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLConnection.Database">
            <summary>
            Gets or sets the database name
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLConnection.Password">
            <summary>
            Gets or sets the database password. 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLConnection.Cypher">
            <summary>
            Gets or sets the database encryption type, or Cypher type.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLConnection.Exclusive">
            <summary>
            Gets or sets if a database is to be opened in exclusive mode. Required for altering the database schema.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBSQLConnection.ReadOnly">
            <summary>
            Gets or sets if a database is to be opened in readonly mode.
            </summary>
        </member>
        <member name="T:MyMeta.ParamDirection">
            <summary>
            ParamDirection is a property on <see cref="T:MyMeta.IParameter"/>
            </summary>
        </member>
        <member name="F:MyMeta.ParamDirection.Unknown">
            <summary>
            The direction of the parameter is unknown.
            </summary>
        </member>
        <member name="F:MyMeta.ParamDirection.Input">
            <summary>
            The parameter is an input parameter
            </summary>
        </member>
        <member name="F:MyMeta.ParamDirection.InputOutput">
            <summary>
            The parameter is an input/output parameter
            </summary>
        </member>
        <member name="F:MyMeta.ParamDirection.Output">
            <summary>
            The parameter is an output parameter
            </summary>
        </member>
        <member name="F:MyMeta.ParamDirection.ReturnValue">
            <summary>
            The parameter is a procedure return value. For example, in the following ODBC SQL statement to call a procedure, the question mark marks a procedure return value:
            {? = call GetNextOrderID}
            </summary>
        </member>
        <member name="T:MyMeta.SQLite.MetaDataHelper">
            <summary>
            Summary description for SQLiteMetaData.
            </summary>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateDatabasesDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateForeignKeysDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateTablesDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateViewsDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateColumnsDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateIndexesDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateProceduresDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateParametersDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateResultColumnsDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPluginContext.CreateDomainsDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyMeta.IMyMetaPluginContext.IncludeSystemEntities">
            <summary>
            Should the system tables, views, etc be included when calling the plugin for MetaData?
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPluginContext.ProviderName">
            <summary>
            Is the DatabaseName required to make a connection?
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPluginContext.ConnectionString">
            <summary>
            Is the DatabaseName required to make a connection?
            </summary>
        </member>
        <member name="T:Provider.VistaDB.IVistaDBRemoteService">
            <summary>
            This interface gives some service functions to user
            </summary>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.EnumTables">
            <summary>
            Returns VistaDBMetaDataReader object, whic allows to get database meta data
            </summary>
            <returns>VistaDBMetaDataReader object</returns>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.GetActiveUserList">
            <summary>
            Returns active user list (excluding adminstrative user connection)
            </summary>
            <returns>String array of active users</returns>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.GetAliasList">
            <summary>
            Returns alias list
            </summary>
            <returns>String array of aliases</returns>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.GetLogFile">
            <summary>
            Returns content of server log file
            </summary>
            <returns>Content of server log file</returns>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.IsAdminConnection">
            <summary>
            Returns a value indicating whether current connect is aministrative
            </summary>
            <returns>True if current connection is administrative</returns>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.UpdateAliasList">
            <summary>
            Force updating of alias list on the server
            </summary>
        </member>
        <member name="M:Provider.VistaDB.IVistaDBRemoteService.UpdateUserList">
            <summary>
            Force updating user list on the server
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBRemoteConnection.BeginTransaction">
            <summary>
            Begin a transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBRemoteConnection.CommitTransaction">
            <summary>
            Commit an active transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBRemoteConnection.RollbackTransaction">
            <summary>
            Rollback the active transaction. Transactions may be nested. 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBRemoteConnection.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
        </member>
        <member name="T:MyMeta.IPropertyCollection">
             <summary>
             IPropertyCollection is a collection of user defined key/value pairs.
             </summary>
             <remarks>
             There is a property collection on every entity in your database, you can add key/value
             pairs to the User Meta Data either through the user interface of MyGeneration or 
             programmatically in your scripts.  User meta data is stored in XML and never writes to your database.
            
             This can be very useful, you might need more meta data than MyMeta supplies, in fact,
             MyMeta will eventually offer extended meta data using this feature as well. The current plan
             is that any extended data added via MyGeneration will have a key that beings with "MyMeta.Something"
             where 'Something' equals the description. 
             </remarks>
             <example>
            	This VBScript loops though a table of your choosing and adds 6 key/value pairs to the User Meta Data on every column in table.
             <code>
             '===============================================================================
             ' Loop through each column in the selected table and assign it some meta data
             '===============================================================================
             For Each objColumn in objTable.Columns
                 objColumn.Properties.AddKeyValue objColumn.Name, "The Name of this Column is " + objColumn.Name
                 For i = 1 to 5
                     objColumn.Properties.AddKeyValue i, "This is property " + i
                 Next
             Next
            
             '===============================================================================
             ' Loop through each column and print the meta data
             '===============================================================================
             For Each objColumn in objTable.Columns
                 Set prop = objColumn.Properties.Item(objColumn.Name)
                 output.writeLn prop.Key + " = " + prop.Value
             Next
             </code>
            	This JScript loops though a table of your choosing and adds 6 key/value pairs to the User Meta Data on every column in table.
            	<code>
             //===============================================================================
             // Loop through each column in the selected table and assign it some meta data
             //===============================================================================
             for (var i = 0; i &lt; objTable.Columns.Count; i++)
             {
                 objColumn = objTable.Columns.Item(i);
                 objColumn.Properties.AddKeyValue(objColumn.Name, "The Name of this Column is " + objColumn.Name);
            
                 for (var j = 0; j &lt; 5; j++)
                 {
                     objColumn.Properties.AddKeyValue(j, "This is property " + j);
                 }
             }
            
             //===============================================================================
             // Loop through each column and print the meta data
             //===============================================================================
             for (var i = 0; i &lt; objTable.Columns.Count; i++)
             {
            	    objColumn = objTable.Columns.Item(i);
            
            	    var prop = objColumn.Properties.Item(objColumn.Name);
                 output.writeLn(prop.Key + " = " + prop.Value);
             }
             </code>
             </example>
        </member>
        <member name="M:MyMeta.IPropertyCollection.AddKeyValue(System.String,System.String)">
            <summary>
            This method will either add or update a key value pair.  If the key already exists in the collection the value will be updated.
            If this key doesn't exist the key/value pair will be added.  If only want to update, and not add new items, use <see cref="M:MyMeta.IPropertyCollection.ContainsKey(System.String)"/> to determine if the key already exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IPropertyCollection.RemoveKey(System.String)">
            <summary>
            Removes a key/value pair from the collection, no error is thrown if the key doesn't exist.
            </summary>
            <param name="key">The key of the desired key/value pair</param>
        </member>
        <member name="M:MyMeta.IPropertyCollection.ContainsKey(System.String)">
            <summary>
            Use ContainsKey to determine if a key exists in the collection.
            </summary>
            <param name="key">The key of the desired key/value pair</param>
            <returns>True if the key exists, False if not</returns>
        </member>
        <member name="M:MyMeta.IPropertyCollection.Clear">
            <summary>
            Removes all key/value pairs from the collection.
            </summary>
        </member>
        <member name="M:MyMeta.IPropertyCollection.Reset">
            <summary>
            Used to support 'foreach' sytax. Do not call this directly.
            </summary>
        </member>
        <member name="M:MyMeta.IPropertyCollection.MoveNext">
            <summary>
            Used to support 'foreach' sytax. Do not call this directly.
            </summary>
        </member>
        <member name="M:MyMeta.IPropertyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="M:MyMeta.IPropertyCollection.GetEnumerator">
            <summary>
            Used to support 'foreach' sytax. Do not call this directly.
            </summary>
        </member>
        <member name="P:MyMeta.IPropertyCollection.Item(System.String)">
            <summary>
            This method returns an IProperty from the collection using the Key to index into the collection. An error is thrown if the key doesn't exist, see <see cref="M:MyMeta.IPropertyCollection.ContainsKey(System.String)"/>.
            </summary>
        </member>
        <member name="P:MyMeta.IPropertyCollection.Current">
            <summary>
            Used to support 'foreach' sytax. Do not call this directly.
            </summary>
        </member>
        <member name="P:MyMeta.IPropertyCollection.IsSynchronized">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="P:MyMeta.IPropertyCollection.Count">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="P:MyMeta.IPropertyCollection.SyncRoot">
            <summary>
            ICollection support. Not implemented.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBLocalConnection">
            <summary>
            VistaDBSQL class for managing V-SQL query statements.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalConnection.OpenDatabaseConnection">
            <summary>
            Open a database connection to a VistaDB database.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalConnection.CloseDatabaseConnection">
            <summary>
            Close an active database connection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalConnection.BeginTransaction">
            <summary>
            Begin a transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalConnection.CommitTransaction">
            <summary>
            Commit an active transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalConnection.RollbackTransaction">
            <summary>
            Rollback the active transaction. Transactions may be nested. 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBLocalConnection.ConnectionID">
            <summary>
            Return a unique connection ID to the opened database.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBLocalConnection.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.AccessMode">
            <summary>
            Connection access mode
            </summary>
        </member>
        <member name="F:Provider.VistaDB.AccessMode.Local">
            <summary>
            Local connection
            </summary>
        </member>
        <member name="F:Provider.VistaDB.AccessMode.Remote">
            <summary>
            Remote connection
            </summary>
        </member>
        <member name="T:Provider.VistaDB.RTagInfo">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.iInfoSize">
            <summary>
            Size of structure in bytes
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bActive">
            <summary>
            True if index active
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.iOrderIndex">
            <summary>
            Index order
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bHasParentIndex">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bUnique">
            <summary>
            True if index is unique
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bPrimary">
            <summary>
            True if index is primary key
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bDesc">
            <summary>
            True if index keys sorts in descending order
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bRYO">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bFts">
            <summary>
            True if index is FTS index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bStandardIndex">
            <summary>
            True if index is standard
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.bCaseInsensitive">
            <summary>
            Reserved, not used for now
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.cpTagName">
            <summary>
            Index name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.cpKeyExpr">
            <summary>
            Index key expression
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.cpForExpr">
            <summary>
            Index condition expression
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagInfo.ulLocaleId">
            <summary>
            Index locale ID
            </summary>
        </member>
        <member name="T:Provider.VistaDB.RTagBackInfo">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagBackInfo.iCount">
            <summary>
            Count of indexes
            </summary>
        </member>
        <member name="F:Provider.VistaDB.RTagBackInfo.pTagsInfo">
            <summary>
            Array of index information
            </summary>
        </member>
        <member name="T:Provider.VistaDB.CypherType">
            <summary>
            Types of encryption.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.CypherType.None">
            <summary>
            Encryption not used
            </summary>
        </member>
        <member name="F:Provider.VistaDB.CypherType.Blowfish">
            <summary>
            Encrypt using Blowfish algorithm 
            </summary>
        </member>
        <member name="F:Provider.VistaDB.CypherType.DES">
            <summary>
            Encrypt using DES algorithm
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBType">
            <summary>
            Data types supported (Column types).
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Character">
            <summary>
            Character data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Date">
            <summary>
            Date data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.DateTime">
            <summary>
            Date and time data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Boolean">
            <summary>
            Boolean data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Memo">
            <summary>
            Memo data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Picture">
            <summary>
            Picture data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Blob">
            <summary>
            Blob data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Currency">
            <summary>
            Currency data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Int32">
            <summary>
            Int32 data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Int64">
            <summary>
            Int64 data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Double">
            <summary>
            Double data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Varchar">
            <summary>
            Varchar data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBType.Guid">
            <summary>
            Guid data type
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBIndexOption">
            <summary>
            Indexing options.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.VIndex">
            <summary>
            V-Index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.Unique">
            <summary>
            Standard unique index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.UniqueVIndex">
            <summary>
            Unique V-Index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.Wait">
            <summary>
            Standard index is not created immediately. 
            The creation is postponed until the option 
            is omited in a next CreateIndex
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.WaitVIndex">
            <summary>
            V-Index is not created immediately. 
            The creation is postponed until the option 
            is omited in a next CreateIndex
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.Heap">
            <summary>
            In-memory standard index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.HeapVIndex">
            <summary>
            Temporary V-Index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.Primary">
            <summary>
            Primary Key standard index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.FTS">
            <summary>
            FTS index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.Standard">
            <summary>
            Index is standard
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.Sensitive">
            <summary>
            Case sensitive standard index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexOption.SensitiveVIndex">
            <summary>
            V-Index is case sensitive
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBTriggerEvent">
            <summary>
            Trigger events.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerEvent.BeforeAppend">
            <summary>
            Before append event
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerEvent.AfterAppend">
            <summary>
            After append event
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerEvent.BeforeUpdate">
            <summary>
            Before update event
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerEvent.AfterUpdate">
            <summary>
            After update event
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerEvent.BeforeDelete">
            <summary>
            Before delete event
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerEvent.AfterDelete">
            <summary>
            After delete event
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBDatabaseParam">
            <summary>
            Database parameters.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBDatabaseParam.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBDatabaseParam.AutoClose">
            <summary>
            Auto close, when all tables in database closed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBDatabaseParam.InMemory">
            <summary>
            Creates in-memory database and destroys it after closing
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBFileType">
            <summary>
            Type of import/export files.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBFileType.CommaDelimitedText">
            <summary>
            Comma delimited text format
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBFileType.XML">
            <summary>
            Text format
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBForeignKeyOptions">
            <summary>
            Foreign key options
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBForeignKeyOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBForeignKeyOptions.OnUpdateCascade">
            <summary>
            Cascade update
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBForeignKeyOptions.OnDeleteCascade">
            <summary>
            Cascade delete
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBAPI">
            <summary>
            Internal class used to communicate with the core data engine.
            </summary>
        </member>
        <member name="T:MyMeta.IProperty">
             <summary>
             IProperty represents a key/value pair within an PropertyCollection.
             </summary>
             <remarks>
             There is a property collection on every entity in your database, you can add key/value
             pairs to the User Meta Data either through the user interface of MyGeneration or 
             programmatically in your scripts.  User meta data is stored in XML and never writes to your database.
            
             This can be very useful, you might need more meta data than MyMeta supplies, in fact,
             MyMeta will eventually offer extended meta data using this feature as well. The current plan
             is that any extended data added via MyGeneration will have a key that beings with "MyMeta.Something"
             where 'Something' equals the description.
             </remarks>
             <example>
            	This VBScript loops though a table of your choosing and adds 6 key/value pairs to the User Meta Data on every column in table.
             <code>
             '===============================================================================
             ' Loop through each column in the selected table and assign it some meta data
             '===============================================================================
             For Each objColumn in objTable.Columns
                 objColumn.Properties.AddKeyValue objColumn.Name, "The Name of this Column is " + objColumn.Name
                 For i = 1 to 5
                     objColumn.Properties.AddKeyValue i, "This is property " + i
                 Next
             Next
            
             '===============================================================================
             ' Loop through each column and print the meta data
             '===============================================================================
             For Each objColumn in objTable.Columns
                 Set prop = objColumn.Properties.Item(objColumn.Name)
                 output.writeLn prop.Key + " = " + prop.Value
             Next
             </code>
            	This JScript loops though a table of your choosing and adds 6 key/value pairs to the User Meta Data on every column in table.
            	<code>
             //===============================================================================
             // Loop through each column in the selected table and assign it some meta data
             //===============================================================================
             for (var i = 0; i &lt; objTable.Columns.Count; i++)
             {
                 objColumn = objTable.Columns.Item(i);
                 objColumn.Properties.AddKeyValue(objColumn.Name, "The Name of this Column is " + objColumn.Name);
            
                 for (var j = 0; j &lt; 5; j++)
                 {
                     objColumn.Properties.AddKeyValue(j, "This is property " + j);
                 }
             }
            
             //===============================================================================
             // Loop through each column and print the meta data
             //===============================================================================
             for (var i = 0; i &lt; objTable.Columns.Count; i++)
             {
            	    objColumn = objTable.Columns.Item(i);
            
            	    var prop = objColumn.Properties.Item(objColumn.Name);
                 output.writeLn(prop.Key + " = " + prop.Value);
             }
             </code>
             </example>
        </member>
        <member name="P:MyMeta.IProperty.Key">
            <summary>
            The Key, unique within the property collection. This can be any value of your choosing.
            </summary>
        </member>
        <member name="P:MyMeta.IProperty.Value">
            <summary>
            The Value, this is the information you store in the <see cref="T:MyMeta.IPropertyCollection"/>, use the Key as a tag.
            </summary>
        </member>
        <member name="P:MyMeta.IProperty.IsGlobal">
            <summary>
            True if this property comes from the Global User Meta Data, false if not.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBNewColumn">
            <summary>
            New column definition object
            </summary>
            <remarks>
            Useful when creating table structures from source code, this object
            lets a column be defined by setting properties. This object can then
            be passed to VistaDBTable.AlterColumn and VistaDBTable.CreateColumn
            overloaded methods.
            </remarks>
        </member>
        <member name="M:Provider.VistaDB.VistaDBNewColumn.#ctor(System.String,Provider.VistaDB.VistaDBType,System.Int32,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="Name">Column name</param>
            <param name="DataType">Column data type</param>
            <param name="Length">Column data size</param>
            <param name="Decimals">Column decimals</param>
            <param name="Required">If True, then column required</param>
            <param name="ReadOnly">If True then column read only</param>
            <param name="Packed">If True then column packed</param>
            <param name="Hidden">If True then column hidden</param>
            <param name="Encrypted">If True then column encrypted</param>
            <param name="Unicode">Reserved, must be False</param>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Name">
            <summary>
            Gets and sets the new column name.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Type">
            <summary>
            Gets and sets the new column type. See VistaDBType for more.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Length">
            <summary>
            Gets and sets the new column size.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Decimals">
            <summary>
            Gets and sets the new column decimals.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Required">
            <summary>
            Gets and sets if this new column is required. This is a column constraint.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.ReadOnly">
            <summary>
            Gets and sets if new column is readonly. 
            </summary>
            <remarks>
            Useful in preventing write access  to a database, specifically to a column. 
            Can be set to False prior to populating the column with data, then alter 
            the table and change the property to True.
            </remarks>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Packed">
            <summary>
            Gets and sets if the new column should be packed (i.e. compressed)
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Hidden">
            <summary>
            Gets and sets if the new column should be hidden. 
            </summary>
            <remarks>
            SELECT * FROM Test will not retrieve the column. Only direct calls to the hidden column name will return results.</remarks>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Encrypted">
            <summary>
            Gets and sets if a column is encrypted.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBNewColumn.Unicode">
            <summary>
            Gets and sets if a column is a unicode. 
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBTable">
            <summary>
            VistaDBTable class provides an object-based live data cursor into a VistaDB data table
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.#ctor(Provider.VistaDB.VistaDBDatabase)">
            <summary>
            Constructor. Set Database property
            </summary>
            <param name="database_">Database object</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.#ctor(Provider.VistaDB.VistaDBDatabase,System.String)">
            <summary>
            Constructor. Set Database and TableName properties.
            </summary>
            <param name="database_">Database object</param>
            <param name="tablename">Table name</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.AlterTable(System.String)">
            <summary>
            Start table restructuring
            </summary>
            <param name="sNewTableName">New table name</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.AlterColumn(System.String,System.String,Provider.VistaDB.VistaDBType,System.Int32,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Alter the column
            </summary>
            <param name="sOldColumnName">Old column name</param>
            <param name="sNewColumnName">New column name</param>
            <param name="vdbType">Column data type</param>
            <param name="iLength">Column data length</param>
            <param name="iDecimals">Column data decimals</param>
            <param name="bRequired">Column required attribute</param>
            <param name="bReadOnly">Column read only attribute</param>
            <param name="bPacked">Column packed attribute</param>
            <param name="bHidden">Column hidden attribute</param>
            <param name="bEncrypted">Column encrypted attribute</param>
            <param name="bUnicode">Reserved</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.AlterColumn(System.String,Provider.VistaDB.VistaDBNewColumn)">
            <summary>
            Alter the column
            </summary>
            <param name="sOldColumnName">Old column name</param>
            <param name="column">New column description</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.AlterTableFinalize(System.Boolean)">
            <summary>
            Finish table restructuring and save changes in the database
            </summary>
            <param name="bForceAlter">Force table to be restructured</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.BlobToFile(System.String,System.String)">
            <summary>
            Writes a BLOB stored in a column data directly to a new disk file. If a file of the same name exists, it is overwritten without warning.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sFilename">File name</param>
            <returns>Return value is (true) if the file was created and written correctly or (false) if anything goes wrong (e.g., invalid column name, etc)</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.BeginOfSet">
            <summary>
            Tests if a row movement function has placed the row pointer before the first row in the table.
            </summary>
            <returns>True or false. If Bof returns true, the row buffer will contain the first row in the table.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ClearFilter">
            <summary>
            Clear filter
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ClearScope">
            <summary>
            Clear scope
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Close">
            <summary>
            Close the current table and release allocated memory. Hot row buffers are flushed to disk before closing.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCount">
            <summary>
            Extracts the number of columns in the current table.
            </summary>
            <returns>An integer containing the number of columns in each row.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnDecimals(System.String)">
            <summary>
            Extracts the number of decimals defined for a numeric column.
            </summary>
            <param name="columnName">Column name</param>
            <returns>The number of decimals defined for the named column. Only meaningful if the column in question is numeric - otherwise zero.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnDecimals(System.Int32)">
            <summary>
            Extracts the number of decimals defined for a numeric column.
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <returns>The number of decimals defined for the named column. Only meaningful if the column in question is numeric - otherwise zero.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnIndex(System.String)">
            <summary>
            Gets number of named column in column array (relative to 1). This function is useful to test the validity of a column name.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The relative position of the column in the column array (relative to 1). If the column does not exist, zero is returned.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnName(System.Int16)">
            <summary>
            Extracts the name of the nth column. The first column is number 1.
            </summary>
            <param name="iNum">Column order number</param>
            <returns>The field name is returned as a string. If uiFieldNum is invalid, a NULL string is returned.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnType(System.String)">
            <summary>
            Reports the type of the named field.
            </summary>
            <param name="columnName">Column name</param>
            <returns>The column type</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnType(System.Int32)">
            <summary>
            Reports the type of the named field.
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <returns>The column type</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnWidth(System.String)">
            <summary>
            Extracts the width of the named column.
            </summary>
            <param name="columnName">Column name</param>
            <returns>The size in bytes of the named column.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnWidth(System.Int32)">
            <summary>
            Extracts the width of the named column.
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <returns>The size in bytes of the named column.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ConnectDatabase">
            <summary>
            Connects to database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Contains(System.String,System.String)">
            <summary>
            Set FTS filter
            </summary>
            <param name="sColumnName">Name of the FTS column</param>
            <param name="sPattern">Filter pattern for FTS</param>
            <returns>First key position</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateColumn(System.String,Provider.VistaDB.VistaDBType,System.Int16,System.Int16)">
            <summary>
            Defines a column to be included in a new table. A new table is created by first making a table ID with CreateNew. Each column is then defined with CreateColumn, and the table is finally physically created by calling CreateFinalize.
            </summary>
            <param name="sName">Column name</param>
            <param name="vdbType">Column data type</param>
            <param name="iLength">Length for column</param>
            <param name="iDecimals">Decimals for column</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateColumn(System.String,Provider.VistaDB.VistaDBType,System.Int32,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Defines a column with extended options to be included in a new table. A new table is created by first making a table ID with CreateNew. Each column is then defined with CreateColumn, and the table is finally physically created by calling CreateFinalize.
            </summary>
            <param name="sName">Column name</param>
            <param name="vdbType">Column data type</param>
            <param name="iLength">Length for column</param>
            <param name="iDecimals">Decimals for column</param>
            <param name="bRequired">True for required</param>
            <param name="bReadOnly">True for read only</param>
            <param name="bPacked">True for packed</param>
            <param name="bHidden">True for hidden</param>
            <param name="bEncrypted">True for encrypted</param>
            <param name="bUnicode">This is parameter reserved</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateColumn(Provider.VistaDB.VistaDBNewColumn)">
            <summary>
            Create new column
            </summary>
            <param name="column">Column description object</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateFinalize">
            <summary>
            Creates a table in the table ID set up via CreateNew and according to the column specifications defined with CreateColumn.
            This function is called as the last in a series of functions used to create a new table. CreateFinalize only operates upon the structure set up via a call to CreateNew (which sets up a new table ID) and calls to CreateColumn which define the columns in the table.
            </summary>
            <returns>True or False depending upon the outcome of the operation. It will be False if the preliminary operations have not been called successfully.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateFromTable(Provider.VistaDB.VistaDBTable,System.Boolean,System.Boolean)">
            <summary>
            Creates new table and load data in one database, which is copy of the table from another database
            </summary>
            <param name="table">VistaDBTable object</param>
            <param name="loadData">Load data (true) or no (false)</param>
            <param name="importIndexes">If True, then indexes will be imported from the source table</param>
            <returns>True is succed, otherwise false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateFTSIndex(System.String,System.String)">
            <summary>
            Create new FTS index with default words content for this index.
            Such default symbols set: digit symbols, apostrophe symbol and the other symbols this ANSI values greater of 0x40 (the letter 'A').
            </summary>
            <param name="indexName">FTS index name</param>
            <param name="columnName">Column name</param>
            <returns>Return index order. If it is 0, then index is not created.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateFTSIndex(System.String,System.String,System.String)">
            <summary>
            Create new FTS index and set words content for this index.
            </summary>
            <param name="indexName">FTS index name</param>
            <param name="columnName">Column name</param>
            <param name="wordsContent">The set of character that will be included into FTS index keys. 
            The other symbols will be respected as words separators.
            If string is null or empty the engine uses default set of these symbols.
            Such default symbols set: digit symbols, apostrophe symbol and the other symbols this ANSI values greater of 0x40 (the letter 'A').</param>
            <returns>Return index order. If it is 0, then index is not created.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateIndex(System.String,System.String,Provider.VistaDB.VDBIndexOption,System.Boolean,System.Int32)">
            <summary>
            Create new index
            </summary>
            <param name="indexName">Index name</param>
            <param name="expr">Index expression</param>
            <param name="option">Option for new index</param>
            <param name="descend">True for descend order for index</param>
            <param name="locale">Index order locale. Put 0 for system locale</param>
            <returns>Return index order. If it is 0, then index is not created.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CreateNew">
            <summary>
            Initializes a new table ID. This is the first step in creating a new table. The second step is to define each column with calls to CreateColumn. The final step is CreateFinalize, which physically creates the new table
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DeleteAllRows(System.Boolean)">
            <summary>
            Delete all rows from the table
            </summary>
            <param name="usingFilter">If set to True, then delete rows, which visible in current filter else delete all rows</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DeleteAllRows(System.Boolean,System.Boolean)">
            <summary>
            Delete all rows from the table
            </summary>
            <param name="usingFilter">If set to True, then delete rows, which visible in current filter else delete all rows</param>
            <param name="withRecycling">If set to False, then method doesn't use recycling mechanism, this increase speed</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DeleteCurrentRow">
            <summary>
            Delete current row
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DropColumn(System.String)">
            <summary>
            Drop column under restructuring
            </summary>
            <param name="columnName">Column name</param>
            <returns>True if column dropped, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DropConstraint(System.String)">
            <summary>
            Drop constraint
            </summary>
            <param name="sName">Constraint name</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DropForeignKey(System.String)">
            <summary>
            Drop foreign key from table
            </summary>
            <param name="sForeignKeyName">Foreign key name</param>
            <returns>True if success </returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DropIdentity(System.String)">
            <summary>
            Drop identity
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DropIndex(System.String)">
            <summary>
            Drop index
            </summary>
            <param name="indexName">Index name</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.DropTrigger(System.String)">
            <summary>
            Drop trigger
            </summary>
            <param name="sName">Trigger name</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Encrypted">
            <summary>
            Determines whether the table is encrypted.
            </summary>
            <returns>True if the table is encrypted.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.EndOfSet">
            <summary>
            Tests if a row movement function has placed the row pointer beyond the last row in the table.
            </summary>
            <returns>True if end of file has been encountered and false if not. If Eof returns true, the row buffer is empty and the current row number is equal to the number of rows in the table plus one.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.EnumConstraints(System.String[]@)">
            <summary>
            Enumerate table constraints 
            </summary>
            <param name="list">Constraints names list</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.EnumForeignKeys(System.String[]@)">
            <summary>
            Enumerate all foreign keys for table
            </summary>
            <param name="list">List of foreign keys</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.EnumIdentities(System.String[]@)">
            <summary>
            Enumerate table identities
            </summary>
            <param name="list">Identities names list</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.EnumIndexes(System.String[]@)">
            <summary>
            Enumerate table indexes
            </summary>
            <param name="list">Indexes names list</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.EnumTriggers(System.String[]@)">
            <summary>
            Enumerate table triggers
            </summary>
            <param name="list">Triggers names list</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ExportToFile(System.String,Provider.VistaDB.VDBFileType)">
            <summary>
            Export table data to file
            </summary>
            <param name="sFileName">File name</param>
            <param name="vdbFileType">File type. There two file types:
            1) Text File
            2) XML File
            </param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Find(System.String,System.String)">
            <summary>
            Find row by key value expression with using index
            </summary>
            <param name="sKeyValue">Key value expression</param>
            <param name="sIndexName">Index name</param>
            <returns>Return true if row found</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Find(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Find row by key value expression with using index
            </summary>
            <param name="keyValue">Key value expression</param>
            <param name="indexName">Index name</param>
            <param name="exactMatch">True for searching by using exact matching</param>
            <param name="noMatchStopsOnNextRecord">No match stops on next record</param>
            <returns>Return true if row found</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Find(System.String)">
            <summary>
            Find row by key value expression with using active index
            </summary>
            <param name="keyValue">Key value expression</param>
            <returns>Return true if active index is set and row found</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Find(System.String,System.Boolean,System.Boolean)">
            <summary>
            Find row by key value expression with using active index
            </summary>
            <param name="sKeyValue">Key value expression</param>
            <param name="bExactMatch">True for searching by using exact matching</param>
            <param name="bSoftPosition">True for searching by using soft position</param>
            <returns>Return true if active index is set and row found</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.First">
            <summary>
            Move to the first row in the table
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBlob(System.String,System.Byte[]@)">
            <summary>
            Retrieves a BLOB that was stored in a column. A BLOB is a binary large object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="buffer">Buffer for blob data</param>
            <returns>Return bytes count which puts in the buffer</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBlob(System.String,System.IO.MemoryStream@)">
            <summary>
            Retrieves a BLOB that was stored in a column. A BLOB is a binary large object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="stream">MemoryStream object for blob data</param>
            <returns>Return bytes count which puts in the MemoryStream object</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBlob(System.Int32,System.Byte[]@)">
            <summary>
            Retrieves a BLOB that was stored in a column. A BLOB is a binary large object.
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <param name="buffer">Buffer for blob data</param>
            <returns>Return bytes count which puts in the buffer</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBlob(System.Int32,System.IO.MemoryStream@)">
            <summary>
            Retrieves a BLOB that was stored in a column. A BLOB is a binary large object.
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <param name="stream">MemoryStream object for blob data</param>
            <returns>Return bytes count which puts in the MemoryStream object</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBlobLength(System.String)">
            <summary>
            Retrieves the length of a BLOB that was stored in a BLOB column. A BLOB is a binary large object.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The size of the BLOB as integer.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBoolean(System.String)">
            <summary>
            Determines whether a boolean column contains a True or False value.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>True if the column evaluates as True, and False if not.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetBoolean(System.Int32)">
            <summary>
            Determines whether a boolean column contains a True or False value.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>True if the column evaluates as True, and False if not.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetColumnCaption(System.String)">
            <summary>
            Get column caption
            </summary>
            <param name="columnName">Column name</param>
            <returns>Return column caption</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetColumnCaption(System.Int32)">
            <summary>
            Get column caption
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <returns>Return column caption</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetConstraint(System.String)">
            <summary>
            Get constraint
            </summary>
            <param name="sName">Constraint name</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetCurrency(System.String)">
            <summary>
            Get currency value for the column name
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>Currency value</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetCurrency(System.Int32)">
            <summary>
            Get currency value by column index
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>Currency value</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDate(System.String)">
            <summary>
            Extracts date by column name
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>Date and time</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDate(System.Int32)">
            <summary>
            Extracts date by column index
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>Date and time</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDateTime(System.String)">
            <summary>
            Extracts date and time by column name
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>Date and time</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDateTime(System.Int32)">
            <summary>
            Extracts date and time by column index
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>Date and time</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDefaultValue(System.String,System.Boolean@)">
            <summary>
            Get default value
            </summary>
            <param name="columnName">Column name</param>
            <param name="useInUpdate">Use this default value in updates. 
            Useful when combined with V-Script functions that generate dynamic values, such as the DATE() function.</param>
            <returns>Default value for specified column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDefaultValue(System.Int32,System.Boolean@)">
            <summary>
            Get default value
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <param name="useInUpdate">Use this default value in updates. 
            Useful when combined with V-Script functions that generate dynamic values, such as the DATE() function.</param>
            <returns>Default value for specified column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDouble(System.String)">
            <summary>
            Extracts the contents of a double value.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The double value of the column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetDouble(System.Int32)">
            <summary>
            Extracts the contents of a double value.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>The double value of the column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetForeignKey(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Get foreign key information by foreign key name
            </summary>
            <param name="sForeignKeyName">Foreign key name</param>
            <param name="sForeignKey">Foreign key</param>
            <param name="sPrimTable">Primary table</param>
            <param name="sPrimKey">Primary key</param>
            <returns>Foreign key description</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetForeignKey(System.String,System.String@,System.String@,System.String@,Provider.VistaDB.VDBForeignKeyOptions@)">
            <summary>
            Get foreign key information (including options) by foreign key name
            </summary>
            <param name="sForeignKeyName">Foreign key name</param>
            <param name="sForeignKey">Foreign key</param>
            <param name="sPrimTable">Primary table</param>
            <param name="sPrimKey">Primary key</param>
            <param name="options">Foreign key options</param>
            <returns>Foreign key description</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetGuid(System.String)">
            <summary>
            Extracts the contents of a Guid column as Guid structure.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The contents of the column converted to Guid structure</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetGuid(System.Int32)">
            <summary>
            Extracts the contents of a Guid column as Guid structure.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>The contents of the column converted to Guid structure</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetIdentity(System.String,System.Double@)">
            <summary>
            Get identity
            </summary>
            <param name="columnName">Column name</param>
            <param name="step">Identity step</param>
            <returns>Return current identity value</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetIdentity(System.Int32,System.Double@)">
            <summary>
            Get identity
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <param name="step">Identity step</param>
            <returns>Return current identity value</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetIndex(System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Get index info
            </summary>
            <param name="indexName">Index name</param>
            <param name="active">If true then index is active else inactive</param>
            <param name="orderIndex">Index order</param>
            <param name="unique">If true then index is unique</param>
            <param name="primary">If true then index is primary key</param>
            <param name="desc">If true then index descending</param>
            <param name="keyExpr">Index expression</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetIndex(System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@,System.Boolean@)">
            <summary>
            Get index info
            </summary>
            <param name="indexName">Index name</param>
            <param name="active">If true then index is active else inactive</param>
            <param name="orderIndex">Index order</param>
            <param name="unique">If true then index is unique</param>
            <param name="primary">If true then index is primary key</param>
            <param name="desc">If true then index descending</param>
            <param name="keyExpr">Index expression</param>
            <param name="fts">If tru then index is FTS</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetInt32(System.String)">
            <summary>
            Extracts the contents of a 32-bit integer column
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The contents of the column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetInt32(System.Int32)">
            <summary>
            Extracts the contents of a 32-bit integer column
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>The contents of the column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetInt64(System.String)">
            <summary>
            Extracts the contents of a numeric column as a signed 64-bit integer value.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The contents of the column converted to a signed long integer value.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetInt64(System.Int32)">
            <summary>
            Extracts the contents of a numeric column as a signed 64-bit integer value.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>The contents of the column converted to a signed long integer value.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetMemo(System.String)">
            <summary>
            Extracts the contents of a memo column as a string and optionally format the memo with hard carriage returns and line feeds for printing.
            </summary>
            <param name="columnName">Column name</param>
            <returns>The a reference to the memo contents is returned as a string. An empty memo is returned as a NULL string.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetMemo(System.Int32)">
            <summary>
            Extracts the contents of a memo column as a string and optionally format the memo with hard carriage returns and line feeds for printing.
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <returns>The a reference to the memo contents is returned as a string. An empty memo is returned as a NULL string.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetNull(System.String)">
            <summary>
            Check if column data is null
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>Return True if column data is NULL</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetNull(System.Int32)">
            <summary>
            Check if column data is null
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>Return True if column data is NULL</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetObject(System.Int32)">
            <summary>
            Extract VistaDB type column value
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <returns>Content of column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetObject(System.String)">
            <summary>
            Extract VistaDB type column value
            </summary>
            <param name="columnName">Column name</param>
            <returns>Content of column</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetString(System.String)">
            <summary>
            Extracts the contents of any column as a string value.
            </summary>
            <param name="sColumnName">Column name</param>
            <returns>The column contents are returned as a string.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetString(System.Int32)">
            <summary>
            Extracts the contents of any column as a string value.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <returns>The column contents are returned as a string.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GetTrigger(System.String,Provider.VistaDB.VDBTriggerEvent@,System.Int32@)">
            <summary>
            Get trigger
            </summary>
            <param name="sName">Trigger name</param>
            <param name="EventOption">Event option for trigger</param>
            <param name="piPriority">Trigger priority</param>
            <returns>Return trigger text</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.GoNextFtsKey">
            <summary>
            Go to the next key for the current FTS filter
            </summary>
            <returns>Key position in column data</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ImportFromFile(System.String,Provider.VistaDB.VDBFileType,System.String)">
            <summary>
            Import data to table from file
            </summary>
            <param name="sFileName">File name</param>
            <param name="vdbFileType">File type. There two file types:
            1) Text File
            2) XML File
            </param>
            <param name="sScopeExpr">Filter expression for importing data</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.IndexAscending">
            <summary>
            Flip index order to ascending
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.IndexDescending">
            <summary>
            Flip index order to descending
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.IndexInformation(System.String,Provider.VistaDB.RTagInfo@)">
            <summary>
            Get index information
            </summary>
            <param name="sIndexName">Index name</param>
            <param name="indexInfo">Index info</param>
            <returns>Return true if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.IndexOrder">
            <summary>
            Return current index order
            </summary>
            <returns>Return current index order</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Insert">
            <summary>
            Inserts a new blank row to the table.
            </summary>
            <example>This sample shows how to insert new row
            <code>
            static void Main()
            {
            	VistaDBDatabase vistaDB = new VistaDBDatabase();
            	VistaDBTable vistaTbl = new VistaDBTable();
            
            	vistaDB.DataPath = @"D:\Database\data.vdb";
            	vistaDB.Open();
            	
            	vistaTbl.Database = vistaDB;
            	vistaTbl.Open();
            	
            	//Insert new string with the 
            	vistaTbl.Insert();
            	vistaTbl.PutString("FirstName", "Pavel");
            
            	string alias = vistaTbl.Alias();
            	System.Console.WriteLine("Alias = " + alias);
            
            	vistaTbl.Close();
            	vistaDB.Close();
            }
            </code>
            </example>		
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.IsIndexExists(System.String)">
            <summary>
            Returns true if index exists.
            </summary>
            <param name="name">Index name</param>
            <returns>True if index exists, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.IsTriggerExist(System.String)">
            <summary>
            Returns true if trigger exists
            </summary>
            <param name="triggerName">Trigger name</param>
            <returns>Return true if trigger exists, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Last">
            <summary>
            Move to the last row in the table
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.LoadFromTable(Provider.VistaDB.VistaDBTable)">
            <summary>
            Load data from the table
            </summary>
            <param name="table">VistaDBTable object</param>
            <returns>True if succed, otherwise false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.LockRow(System.Int64)">
            <summary>
            Locks row by row ID
            </summary>
            <param name="rowID">Row ID</param>
            <returns>True if row locked successfully and false if no</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.LockRow">
            <summary>
            Locks current row
            </summary>
            <returns>True if row locked successfully and false if no</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.MoveBy(System.Int32)">
            <summary>
            Move forward or backward a specified number of rows
            </summary>
            <param name="bypassRecs">The number of rows to move</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.MoveTo(System.Int64)">
            <summary>
            Move to the specified row
            </summary>
            <param name="rowID">Row ID</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Next">
            <summary>
            Move to the next row
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Open">
            <summary>
            Open table
            </summary>
            <returns>Return true if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Post">
            <summary>
            Writes the contents of the row buffer to the database.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Prior">
            <summary>
            Move to the previous row
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutBlob(System.String,System.Byte[])">
            <summary>
            Stores a BLOB in a column. A BLOB is a binary large object.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="vpData">Blob data</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutBlob(System.Int32,System.Byte[])">
            <summary>
            Stores a BLOB in a column. A BLOB is a binary large object.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="vpData">Blob data</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutBlobFromFile(System.String,System.String)">
            <summary>
            Put BLOB info from file to database
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sFileName">Source file name</param>
            <returns>True for success else False</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutBlobFromFile(System.Int32,System.String)">
            <summary>
            Put BLOB info from file to database
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="sFileName">Source file name</param>
            <returns>True for success else False</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutBoolean(System.String,System.Boolean)">
            <summary>
            Stores boolean value in a column.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="bVal">Boolean value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutBoolean(System.Int32,System.Boolean)">
            <summary>
            Stores boolean value in a column.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="bVal">Boolean value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutCurrency(System.Int32,System.Decimal)">
            <summary>
            Stores currency value in a column.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="dVal">Currency value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutCurrency(System.String,System.Decimal)">
            <summary>
            Stores currency value in a column.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="dVal">Currency value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutDate(System.String,System.DateTime)">
            <summary>
            Stores date value in a column.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="dVal">Date and time value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutDate(System.Int32,System.DateTime)">
            <summary>
            Stores date value in a column.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="dVal">Date and time value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutDateTime(System.String,System.DateTime)">
            <summary>
            Stores date and time value in a column.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="dVal">Date and time value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutDateTime(System.Int32,System.DateTime)">
            <summary>
            Stores date and time value in a column.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="dVal">Date and time value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutDouble(System.String,System.Double)">
            <summary>
            Stores double value in a column.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="dVal">Double value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutDouble(System.Int32,System.Double)">
            <summary>
            Stores double value in a column.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="dVal">Double value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutGuid(System.String,System.Guid)">
            <summary>
            Stores Guid value in a column
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="guidVal">Guid value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutGuid(System.Int32,System.Guid)">
            <summary>
            Stores Guid value in a column
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="guidVal">Guid value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutInt32(System.String,System.Int32)">
            <summary>
            Stores 32-bit integer value in a column.
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="iVal">Integer value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutInt32(System.Int32,System.Int32)">
            <summary>
            Stores 32-bit integer value in a column.
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="iVal">Integer value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutInt64(System.String,System.Int64)">
            <summary>
            Stores long value (64-bit integer value) in a column
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="iVal">Long value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutInt64(System.Int32,System.Int64)">
            <summary>
            Stores long value (64-bit integer value) in a column
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="iVal">Long value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutMemo(System.String,System.String)">
            <summary>
            Stores memo data in a column
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sVal">Memo data</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutMemo(System.Int32,System.String)">
            <summary>
            Stores memo data in a column
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="sVal">Memo data</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutString(System.String,System.String)">
            <summary>
            Stores string in a column
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sVal">String data</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutString(System.Int32,System.String)">
            <summary>
            Stores string in a column
            </summary>
            <param name="iColumnIndex">Column index (0-based)</param>
            <param name="sVal">String data</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.Reindex">
            <summary>
            Reindex all indexes in the table
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.RenameTable(System.String)">
            <summary>
            Rename table
            </summary>
            <param name="newName">New table name</param>
            <returns>True if table renamed</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ResetFilter">
            <summary>
            Clear filter for table
            </summary>
            <returns>Return true if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.RowCount">
            <summary>
            Return row count
            </summary>
            <returns>Return row count</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.CurrentRowID">
            <summary>
            Return ID for current row
            </summary>
            <returns>Row ID</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.RowLocked(System.Int64)">
            <summary>
            Return lock status by row ID
            </summary>
            <param name="rowID">Row ID</param>
            <returns>True if row locked, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.RowLocked">
            <summary>
            Return lock status for current row
            </summary>
            <returns>True if row is locked, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SaveToDatabase(Provider.VistaDB.VistaDBTable)">
            <summary>
            Save table data to another table
            </summary>
            <param name="table">VistaDBTable object</param>
            <returns>True if succed, otherwise false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutObject(System.Int32,System.Object)">
            <summary>
            Put VistaDB type column value to database
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
            <param name="value">Column data value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.PutObject(System.String,System.Object)">
            <summary>
            Put VistaDB type column value to database
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column data value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetColumnCaption(System.String,System.String)">
            <summary>
            Set column caption
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sCaption">Caption for column</param>
            <returns>Return true if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetConstraint(System.String,System.String,System.String)">
            <summary>
            Set constraint
            </summary>
            <param name="sName">Constraint name</param>
            <param name="sConstraint">Constraint text</param>
            <param name="sConstraintDescr">Constraint description</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetDefaultValue(System.String,System.String,System.Boolean)">
            <summary>
            Set default value for column
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sSeed">Default value or V-Script function</param>
            <param name="bUseInUpdate">Use this default value in updates. 
            Useful when combined with V-Script functions that generate dynamic values, such as the DATE() function.</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetFilter(System.String)">
            <summary>
            Set filter for table
            </summary>
            <param name="sExpression">V-Script filter expression</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetFilter(System.String,System.Boolean)">
            <summary>
            Set filter for table with "use/no use" optimization option
            </summary>
            <param name="sExpression">Filter expression</param>
            <param name="bUseOptimization">If true, then use optimization else not use</param>
            <returns>If success then return true</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetForeignKey(System.String,System.String,System.String)">
            <summary>
            Set foreign key for table
            </summary>
            <param name="sForeignKeyName">Foreign key name</param>
            <param name="sForeignConstraint">Foreign key body</param>
            <param name="sDescription">Foreign key description</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetForeignKey(System.String,System.String,System.String,Provider.VistaDB.VDBForeignKeyOptions)">
            <summary>
            Set foreign key with options 
            </summary>
            <param name="sForeignKeyName">Foreign key name</param>
            <param name="sForeignConstraint">Foreign key body</param>
            <param name="sDescription">Foreign key description</param>
            <param name="options">Option for foreign key</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetIdentity(System.String,System.String,System.Double)">
            <summary>
            Set identity
            </summary>
            <param name="sColumnName">Column name</param>
            <param name="sSeedExpr">Seed expression</param>
            <param name="dStep">Identity step</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetLockTimeout(System.Int16)">
            <summary>
            Sets lock timeout
            </summary>
            <param name="value">Lock timeout int seconds</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetNull(System.String)">
            <summary>
            Set null value for column data
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetNull(System.Int32)">
            <summary>
            Set null value for column data
            </summary>
            <param name="columnIndex">Column index (0-based)</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetScope(System.String,System.String)">
            <summary>
            Set a scope filter on the table. Scope must act on indexed columns.
            </summary>
            <param name="sLowVal">Low border</param>
            <param name="sHighVal">High border</param>
            <returns>Return true if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetScope(System.String)">
            <summary>
            Set a scope filter on the table. Scope must act on indexed columns.
            </summary>
            <param name="val">High and low border</param>
            <returns>Return true if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.SetTrigger(System.String,System.String,System.String,Provider.VistaDB.VDBTriggerEvent,System.Int32)">
            <summary>
            Create a new Trigger.
            </summary>
            <param name="sName">Trigger name</param>
            <param name="sTrigger">Trigger V-Script</param>
            <param name="sTriggerDescr">Trigger description</param>
            <param name="EventOption">Event options</param>
            <param name="iPriority">Trigger priority</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.UnlockRow(System.Int32)">
            <summary>
            Unlock specified row
            </summary>
            <param name="RowID">Row ID</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.UnlockRow">
            <summary>
            Unlock current row
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ActiveIndex">
            <summary>
            Gets or sets the active index.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.Columns">
            <summary>
            Gets the collection of columns
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ConstraintActive">
            <summary>
            Gets the collection of active constraints. 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.Database">
            <summary>
            Gets or sets the database object (VistaDBDatabase).
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.Description">
            <summary>
            Gets or sets the table description.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.Opened">
            <summary>
            Gets the table state. True if the is table opened.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.TableID">
            <summary>
            Gets the numeric Table ID associated with the opened table. This property is the inverse of Alias, which retrieves the alias name assigned to a given Table ID.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.TableName">
            <summary>
            Gets or sets the table name
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.TriggerActive">
            <summary>
            Gets the collection of active triggers. 
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBTable.ConstraintActiveCollection">
            <summary>
            Collection of active constraints.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ConstraintActiveCollection.Item(System.String)">
            <summary>
            Get or set the active property of the constraint.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBTable.ColumnCollection">
            <summary>
            Collection of columns
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Remove(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Contains(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Add(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.GetEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.Item(System.String)">
            <summary>
            Get column info by name
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.Item(System.Int32)">
            <summary>
            Get column info by index
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Enumerator.#ctor(Provider.VistaDB.VistaDBTable.ColumnCollection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBTable.ColumnCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.ColumnCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBTable.TriggerActiveCollection">
            <summary>
            Collection of active triggers.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBTable.TriggerActiveCollection.Item(System.String)">
            <summary>
            Get or set the active property of the trigger.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDataSet">
            <summary>
            Summary description for VistaDBDataSet.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.IVistaDBDataSet">
            <summary>
            Summary description for IVistaDBDataSet.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Add(System.Object)">
            <summary>
            Not used. Always return -1.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the PropertyDescriptor to the indexes used for searching.
            </summary>
            <param name="property">The PropertyDescriptor to add to the indexes used for searching.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.AddNew">
            <summary>
            Adds a new item to the list.
            </summary>
            <returns>The item added to the list.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a PropertyDescriptor and a ListSortDirection.
            </summary>
            <param name="property">The PropertyDescriptor to sort by.</param>
            <param name="direction">One of the ListSortDirection values.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Clear">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.ClearFilter">
            <summary>
            Clear data set filter
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.ClearScope">
            <summary>
            Clear data set scope
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Close">
            <summary>
            Close data set
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Contains(System.Object)">
            <summary>
            Determines whether the VistaDBDataSet object contains a specific VistaDBDataRow object.
            </summary>
            <param name="value">The VistaDBDataRow object to locate.</param>
            <returns>true if the VistaDBDataRow object is found; otherwise, false.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the VistaDBDataRow objects of to an Array, starting at a particular Array index
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from VistaDBDataSet. The Array must have zero-based indexing.</param>
            <param name="index">A 32-bit integer that represents the position of the Array element to set.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given PropertyDescriptor.
            </summary>
            <param name="property">The PropertyDescriptor to search on.</param>
            <param name="key">The value of the property parameter to search for.</param>
            <returns>The index of the row that has the given PropertyDescriptor.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a rows.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the rows.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the PropertyDescriptorCollection that represents the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">An array of PropertyDescriptor objects to find in the collection as bindable. This can be a null reference (Nothing in Visual Basic).</param>
            <returns>The PropertyDescriptorCollection that represents the properties on each item used to bind data.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">An array of PropertyDescriptor objects, the list name for which is returned. This can be a null reference (Nothing in Visual Basic).</param>
            <returns>The name of the list.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific VistaDBDataRow object.
            </summary>
            <param name="value">The VistaDBDataRow object to locate.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Insert(System.Int32,System.Object)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Open">
            <summary>
            Opens data set
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.RefreshDataSet">
            <summary>
            Refresh data set
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Remove(System.Object)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the PropertyDescriptor from the indexes used for searching.
            </summary>
            <param name="property">The PropertyDescriptor to remove from the indexes used for searching.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.RemoveSort">
            <summary>
            Removes any sort applied using ApplySort.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.SetFilter(System.String)">
            <summary>
            Set filter on data set
            </summary>
            <param name="expression">Filter expression</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.SetFilter(System.String,System.Boolean)">
            <summary>
            Set filter on data set
            </summary>
            <param name="expression">Filter expression</param>
            <param name="useOptimization">True for using optimization</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.SetScope(System.String)">
            <summary>
            Set scope
            </summary>
            <param name="val">Scope expression</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.SetScope(System.String,System.String)">
            <summary>
            Set scope
            </summary>
            <param name="lowVal">Scope low value</param>
            <param name="highVal">Scoppe high value</param>
            <returns>Tru if success</returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.ActiveIndex">
            <summary>
            Active table index
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.AllowNew">
            <summary>
            Gets whether you can add items to the list using AddNew.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using Remove or RemoveAt.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.Columns">
            <summary>
            Data set columns
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.Count">
            <summary>
            Gets the row count
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.Database">
            <summary>
            VistaDBDatabase object
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the VistaDBDataRow object at the specified index.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.IsOpened">
            <summary>
            Show if data set opened
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.IsSynchronized">
            <summary>
            Always return false
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.SortProperty">
            <summary>
            Gets the PropertyDescriptor that is being used for sorting.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.SupportsChangeNotification">
            <summary>
            Gets whether a ListChanged event is raised when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.SupportsSearching">
            <summary>
            Gets whether the list supports searching using the Find method.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the VistaDBDataSet 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.Item(System.Int32)">
            <summary>
            Return VistaDBDataRow
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="E:Provider.VistaDB.VistaDBDataSet.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor">
            <summary>
            VistaDB property descriptor class
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Return column value
            </summary>
            <param name="component">VistaDBDataRow object</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Set column value
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.ComponentType">
            <summary>
            Type of VistaDBDataRow
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.IsReadOnly">
            <summary>
            Return if data set is read only (true) or no (fase)
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.VistaDBPropertyDescriptor.PropertyType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataSet.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataSet.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:MyMeta.PostgreSQL8.ConnectionHelper">
            <summary>
            Summary description for ConnectionHelper.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBConnection">
            <summary>
            Connection object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.#ctor(System.String)">
            <summary>
            Constructor with a connection string.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.Finalize">
            <summary>
            VistaDBConnection destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.Dispose(System.Boolean)">
            <summary>
            Overloaded. Releases the resources used by the component.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.GetRemoteService">
            <summary>
            Returns remote service object
            </summary>
            <returns>Remote service object</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.BeginTransaction">
            <summary>
            Overloaded. Begins a database transaction. Transactions may be nested.
            </summary>
            <remarks>
            VistaDB always uses snapshot isolation, where each new transaction receives 
            its own view of the database at the moment the transaction is started. 
            Uncommitted and committed changes by other connections and transactions are 
            not seen until this transaction is committed or rolled back.
            </remarks>
            <returns>Transaction ID</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Not supported.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.ChangeDatabase(System.String)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.Open">
            <summary>
            Open the connection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.CreateCommand">
            <summary>
            Creates and returns a VistaDBCommand object associated with the VistaDBConnection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.CreateTemporaryDatabase(System.Int32,System.Boolean)">
            <summary>
            Creates temporary database and connects to it
            </summary>
            <param name="cultureID">Database culture ID</param>
            <param name="caseSensitive">True if database is case sensitive</param>
            <returns>VistaDBConnection object</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBConnection.CreateTemporaryDatabase(Provider.VistaDB.VistaDBDatabase)">
            <summary>
            Connects to temporary database.
            After connection created VistaDBDatabase object lose control to database.
            </summary>
            <param name="db">VistaDBDatabase object</param>
            <returns>VistaDBConnection object</returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.System#Data#IDbConnection#ConnectionTimeout">
            <summary>
            Returns the connection time-out value set in the connection
            string. Zero indicates an indefinite time-out period.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.ConnectionString">
            <summary>
            Gets or sets the connection string. 
            </summary>
            <remarks>
            The ConnectionString is similar to an OLE DB connection string, but is not identical. Unlike OLE DB or ADO, 
            the connection string that is returned is the same as the user-set ConnectionString.
            You can use the ConnectionString property to connect to a database.
            </remarks>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.ConnectionTimeout">
            <summary>
            Returns the connection time-out value set in the connection
            string. Zero indicates an indefinite time-out period.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.DataSource">
            <summary>
            Gets or sets the name of the instance of the VistaDB database to connect to.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.Database">
            <summary>
            Gets or sets the name of the current database or the database to be used after a connection is opened.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.Password">
            <summary>
            Gets or sets the database password.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.Cypher">
            <summary>
            Gets or sets the database encryption type, or Cypher type.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.Exclusive">
            <summary>
            Gets or sets if a database is to be opened in exclusive mode. Required for altering the database schema.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.ReadOnly">
            <summary>
            Gets or sets if a database is to be opened in readonly mode.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.LoginUser">
            <summary>
            User login name for server connect
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.LoginPassword">
            <summary>
            Login password for server connect
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.AccessMode">
            <summary>
            Connection access mode
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.CultureID">
            <summary>
            Opened database culture id
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.ClusterSize">
            <summary>
            Opened database cluster size
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.CaseSensitivity">
            <summary>
            Returns True if opened database is case sensitive
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBConnection.DatabaseDescription">
            <summary>
            Opened database description
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBCommand">
            <summary>
            Command object.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBCommand.updatedRowSource">
            <summary>
            Gets or sets how command results are applied to the DataRow when used by the Update method of the VistaDBDataAdapter.
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VistaDBCommand.parameters">
            <summary>
            Represents a collection of parameters relevant to a VistaDBCommand as well as their respective mappings to 
            columns in a DataSet. This class cannot be inherited.For a list of all members of this type, 
            see VistaDBParameterCollection Members.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.#ctor(System.String)">
            <summary>
            Overloaded. Initializes a new instance of the VistaDBCommand class.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.#ctor(System.String,Provider.VistaDB.VistaDBConnection)">
            <summary>
            Overloaded. Initializes a new instance of the VistaDBCommand class with a connection.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.#ctor(System.String,Provider.VistaDB.VistaDBConnection,Provider.VistaDB.VistaDBTransaction)">
            <summary>
            Overloaded. Initializes a new instance of the VistaDBCommand class with a connection and transaction.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.Finalize">
            <summary>
            VistaDBCommand destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.InitClass">
            <summary>
            Used internally to initialize the object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a SqlCommand.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.CreateParameter">
            <summary>
            Creates a new instance of a VistaDBParameter object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.Dispose(System.Boolean)">
            <summary>
            Overloaded. Releases the resources used by the component.
            </summary>
            <param name="disposing">True for external disposing</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.ExecuteNonQuery">
            <summary>
            Executes a V-SQL statement against the connection and returns the number of rows affected.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.ExecuteReader">
            <summary>
            Overloaded. Sends the CommandText to the Connection and builds a VistaDBDataReader object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Overloaded. Sends the CommandText to the Connection and builds a VistaDBDataReader object, passing in CommandBehavior.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommand.Prepare">
            <summary>
            Creates a prepared version of the command on an instance of VistaDB.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.CommandText">
            <summary>
            Gets or sets the V-SQL statement to execute at the data source.
            </summary>		
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>		
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the CommandText property is to be interpreted.
            </summary>		
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.Connection">
            <summary>
            Gets or sets the VistaDBConnection used by this instance of the VistaDBCommand.
            </summary>		
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.Parameters">
            <summary>
            Gets the VistaDBParameterCollection.
            </summary>		
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.Transaction">
            <summary>
            Gets or sets the VistaDBTransaction within which the VistaDBCommand executes.
            </summary>		
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the DataRow when used by the Update method of the VistaDBDataAdapter.
            </summary>		
        </member>
        <member name="M:MyMeta.PropertyCollectionAll.AddKeyValue(System.String,System.String)">
            <summary>
            This method will either add or update a key value pair.  If the key already exists in the collection the value will be updated.
            If this key doesn't exist the key/value pair will be added.  If only want to update, and not add new items, use <see cref="M:MyMeta.PropertyCollectionAll.ContainsKey(System.String)"/> to determine if the key already exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.PropertyCollectionAll.RemoveKey(System.String)">
            <summary>
            Removes a key/value pair from the collection, no error is thrown if the key doesn't exist.
            </summary>
            <param name="key">The key of the desired key/value pair</param>
        </member>
        <member name="M:MyMeta.PropertyCollectionAll.ContainsKey(System.String)">
            <summary>
            Use ContainsKey to determine if a key exists in the collection.
            </summary>
            <param name="key">The key of the desired key/value pair</param>
            <returns>True if the key exists, False if not</returns>
        </member>
        <member name="M:MyMeta.PropertyCollectionAll.Clear">
            <summary>
            Removes all key/value pairs from the collection.
            </summary>
        </member>
        <member name="T:MyMeta.KeyValueCollection">
            <summary>
            Summary description for KeyValueCollection.
            </summary>
        </member>
        <member name="T:MyMeta.Enumerator">
            <summary>
            Summary description for Enumerator.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBParameterEnumerator">
            <summary>
            Used Internally. 
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterEnumerator.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="prms">Parameter list</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBParameterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBParameterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:MyMeta.SQLite.ConnectionHelper">
            <summary>
            Summary description for ConnectionHelper.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBColumnInfo">
            <summary>
            Column info structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Name">
            <summary>
            Column name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Caption">
            <summary>
            Column caption
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.DataType">
            <summary>
            Column data type
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Width">
            <summary>
            Column width
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Decimals">
            <summary>
            Column decimals
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Identity">
            <summary>
            Returns True if column has identity
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.IncStep">
            <summary>
            Column identity increment step
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.DefValue">
            <summary>
            Column default value or current identity value, if column has identity
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.UseDefValInUpdate">
            <summary>
            Returns True if default value applyes for update operations
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.AllowNull">
            <summary>
            Return True if column allow null
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Description">
            <summary>
            Column description
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.ReadOnly">
            <summary>
            Returns True if column is read only
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Compressed">
            <summary>
            Returns True if column is compressed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.FTS">
            <summary>
            Returns True if column has FTS index
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Encrypted">
            <summary>
            Returns True if column encrypted
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Hidden">
            <summary>
            Returns true if column is hidden
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.PrimaryKey">
            <summary>
            Returns True if column is the part of primary key
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Indexed">
            <summary>
            Returns True if column indexed
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBColumnInfo.Unicode">
            <summary>
            Not supported now. Always returns False
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBIndexInfo">
            <summary>
            Index info structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Name">
            <summary>
            Index name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Standard">
            <summary>
            Returns True if index is standard (none V-Index)
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Fields">
            <summary>
            Fields list, separated by semicolon
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Unique">
            <summary>
            Return True if index is unique
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.PrimaryKey">
            <summary>
            Return true if index is primary key
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Desc">
            <summary>
            Return true if index has descend order
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.CaseSens">
            <summary>
            Return true is index is case sensitive
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Condition">
            <summary>
            Condition, used only for V-Indexes
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.FTS">
            <summary>
            Returns true if index is FTS
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBIndexInfo.Locale">
            <summary>
            Locale used for index
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBTriggerInfo">
            <summary>
            Trigger info structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerInfo.Name">
            <summary>
            Trigger name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerInfo.Event">
            <summary>
            Trigger event
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerInfo.Priority">
            <summary>
            Trigger priority
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerInfo.Active">
            <summary>
            Returns True if trigger is active
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerInfo.Description">
            <summary>
            Trigger description
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBTriggerInfo.Body">
            <summary>
            Trigger body
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBConstraintInfo">
            <summary>
            Constraint info structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBConstraintInfo.Name">
            <summary>
            Constraint name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBConstraintInfo.Active">
            <summary>
            Returns True if constraint is active
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBConstraintInfo.Description">
            <summary>
            Constraint description
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBConstraintInfo.Body">
            <summary>
            Constraint body
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VDBRelationshipInfo">
            <summary>
            Relationship info structure
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.Name">
            <summary>
            Relationship name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.PrimTable">
            <summary>
            Primry table name
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.Description">
            <summary>
            Relationship decsription
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.PrimKeyColumns">
            <summary>
            Relationship primary key columns
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.ForKeyColumns">
            <summary>
            Relationship foreign key columns
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.Body">
            <summary>
            Relationship body
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.CascadeUpdate">
            <summary>
            Returns True if relationship support cascade update
            </summary>
        </member>
        <member name="F:Provider.VistaDB.VDBRelationshipInfo.CascadeDelete">
            <summary>
            Returns True if relationship support cascade delete
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBMetaDataReader">
            <summary>
            Meta data reader class
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBMetaDataReader.EnumColumns(System.String)">
            <summary>
            Enumerate columns info
            </summary>
            <param name="tableName">Table name</param>
            <returns>Columns info list</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBMetaDataReader.EnumConstraints(System.String)">
            <summary>
            Enumerate constraints info
            </summary>
            <param name="tableName">Table name</param>
            <returns>Constraints info list</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBMetaDataReader.EnumIndexes(System.String)">
            <summary>
            Enumerate indexes info
            </summary>
            <param name="tableName">Table name</param>
            <returns>Indexes info list</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBMetaDataReader.EnumRelationships(System.String)">
            <summary>
            Enumerate relationships info
            </summary>
            <param name="tableName">Table name</param>
            <returns>Relationships info list</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBMetaDataReader.EnumTables">
            <summary>
            Enumerate table names
            </summary>
            <returns>Table names list</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBMetaDataReader.EnumTriggers(System.String)">
            <summary>
            Enumerate triggers info
            </summary>
            <param name="tableName">Table name</param>
            <returns>Triggers info list</returns>
        </member>
        <member name="T:MyMeta.Sql.DatabaseSpecific">
            <summary>
            Summary description for DatabaseSpecific.
            </summary>
        </member>
        <member name="T:MyMeta.PostgreSQL.ConnectionHelper">
            <summary>
            Summary description for ConnectionHelper.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBCommandBuilder">
            <summary>
            A helper object that automatically generates and populates command properties of a VistaDBDataAdapter.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.#ctor(Provider.VistaDB.VistaDBDataAdapter)">
            <summary>
            Overloaded constructor.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.#ctor">
            <summary>
            Overloaded constructor.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.Finalize">
            <summary>
            VistaDBCommandBuilder destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.Dispose(System.Boolean)">
            <summary>
            Overloaded. Releases the resources used by the component.
            </summary>
            <param name="disposing">True for external disposing</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.DeriveParameters(Provider.VistaDB.VistaDBCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the VistaDBCommand and populates the Parameters collection of the specified VistaDBCommand object. Now do nothing.
            </summary>
            <param name="command">The VistaDBCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the VistaDBCommand.</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically generated VistaDBCommand object required to perform insertions on the database.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically generated VistaDBCommand object required to perform updates on the database.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically generated VistaDBCommand object required to perform deletions on the database.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommandBuilder.DataAdapter">
            <summary>
             Gets or sets a VistaDBDataAdapter object for which V-SQL statements are automatically generated.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommandBuilder.InsertCommand">
            <summary>
            Gets the automatically generated VistaDBCommand object required to perform insertions on the database.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommandBuilder.UpdateCommand">
            <summary>
            Gets the automatically generated VistaDBCommand object required to perform updates on the database.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBCommandBuilder.DeleteCommand">
            <summary>
            Gets the automatically generated VistaDBCommand object required to perform deletions on the database.
            </summary>
        </member>
        <member name="M:MyMeta.IMyMetaPlugin.Initialize(MyMeta.IMyMetaPluginContext)">
            <summary>
            Initialize the plugin
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:MyMeta.IMyMetaPlugin.GetPrimaryKeyColumns(System.String,System.String)">
            <summary>
            Returns a list of column names that are primary keys for a given table
            </summary>
            <param name="database"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPlugin.GetViewSubViews(System.String,System.String)">
            <summary>
            Returns a list of view names that make up the parent view
            </summary>
            <param name="database"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPlugin.GetViewSubTables(System.String,System.String)">
            <summary>
            Returns a list of table names that make up the parent view
            </summary>
            <param name="database"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:MyMeta.IMyMetaPlugin.GetDatabaseSpecificMetaData(System.Object,System.String)">
            <summary>
            since MyGeneration 1.2.0.7
            This is a way to return proprietary meta data specific to the Database engine. 
            An example would be: 
                sqlServerPlugin.GetDatabaseSpecificMetaData(userITable, "ExtendedProperties");
            
            The myMetaObject match a specific MyMeta object of a type like IColumn, ITable, IView, IProcedure, etc.
            The key is something that describes the kind of meta data requested.
             
            special keys (since MyGeneration 1.2.0.8)
            
            GetDatabaseSpecificMetaData(null,"CanBrowseDatabase")
                - if not null the plugin supports Browse for Database
            
            GetDatabaseSpecificMetaData(null,"BrowseDatabase")
                - Asks the plugin to display a dialog to browse for the database
                - returns a new connectionstring or null
            
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.ProviderUniqueKey">
            <summary>
            The providers unique key
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.ProviderName">
            <summary>
            A name for the MyMeta provider.
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.ProviderAuthorInfo">
            <summary>
            Information about the plugin author
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.ProviderAuthorUri">
            <summary>
            Author's Uri
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.StripTrailingNulls">
            <summary>
            String trailing nulls when fetching meta data? This is currently only true for the MySql providers.
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.RequiredDatabaseName">
            <summary>
            Is the DatabaseName required to make a connection?
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.SampleConnectionString">
            <summary>
            A Sample connection string
            </summary>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.NewConnection">
            <summary>
            Get a IDbConnection for the database that is not opend yet
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="P:MyMeta.IMyMetaPlugin.DefaultDatabase">
            <summary>
            Name of the default database.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDataReader">
            <summary>
            Provides a means of reading a forward-only stream of rows from a VistaDB database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.Finalize">
            <summary>
            VistaDBDataReader destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.Close">
            <summary>
            Closes the VistaDBDataReader object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.First">
            <summary>
            Move to the first record in the data set.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.NextResult">
            <summary>
            Move to the next record in the data set.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.Read">
            <summary>
            Advances the VistaDBDataReader to the next record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find. </param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the column type of the specified column number.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.Dispose">
            <summary>
            Releases the resources used by the component.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type information corresponding to the type of Object that would be returned from GetValue.
            </summary>
            <param name="i">The index of the field to find. </param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values">An array of Object to copy the attribute fields into. </param>
            <returns>The number of instances of Object in the array.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find. </param>
            <returns>The index of the named field.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetByte(System.Int32)">
            <summary>
            Gets the byte value for a Character or Varchar column type by passing the column number.
            </summary>
            <param name="i">Column number</param>
            <returns>Byte value</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the bytes for a Character or Varchar type column by passing the column number.
            </summary>
            <param name="i">Column number</param>
            <param name="fieldOffset">String offset</param>
            <param name="buffer">Byte array to hold the result</param>
            <param name="bufferOffSet"></param>
            <param name="length">Number of bytes to return</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value for a Character or Varchar type column by passing the column number.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the characters for a Character or Varchar type column by passing the column number.
            </summary>
            <param name="i">Column number</param>
            <param name="fieldOffSet">String offset</param>
            <param name="buffer">Byte array to hold the result</param>
            <param name="bufferOffSet"></param>
            <param name="length">Number of characters to return</param>
            <returns>Characters</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the GUID value for a column
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the Int16 value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the Int32 value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the Int64 value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the float value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the DateTime value for a column.
            </summary>
            <param name="i">Column number</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetData(System.Int32)">
            <summary>
            Not supported
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.IsDBNull(System.Int32)">
            <summary>
            Return true if the column value is set to NULL.
            </summary>
            <param name="i">Column number</param>
            <returns>Return true if the column value is set to NULL.</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataReader.GetEnumerator">
            <summary>
            Return IEnumerator
            </summary>
            <returns>Return IEnumerator</returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row. Always returns 0.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the V-SQL statement.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.Columns">
            <summary>
            VistaDBColumnCollection of columns
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDataReader.VistaDBColumnCollection">
            <summary>
            Constructor for manaing a collection of VistaDBColumn objects.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.VistaDBColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column object at a given position.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataReader.VistaDBColumnCollection.Count">
            <summary>
            Gets the number of column objects in the collection.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBLocalQuery">
            <summary>
            Summary description for VistaDBLocalSQL.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.Open">
            <summary>
            Open a V-SQL query. Open is used with SELECT statements only.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.Close">
            <summary>
            Close a V-SQL query.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.ExecSQL">
            <summary>
            Execute a V-SQL query that does not return a result set. These include INSERT, DELETE and UPDATE.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.SetParameter(System.String,Provider.VistaDB.VistaDBType,System.Object)">
            <summary>
            Set a V-SQL parameter.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="dataType">Parameter data type.</param>
            <param name="value">Data value</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.ParamIsNull(System.String)">
            <summary>
            Returns True if the V-SQL parameter value is NULL.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.SetParamNull(System.String,Provider.VistaDB.VistaDBType)">
            <summary>
            Set a V-SQL parameter value to NULL.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.First">
            <summary>
            Go to the first row in the dataset.
            </summary>
            <returns>False if current position doesn't change</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.Next">
            <summary>
            Go to the next row in dataset
            </summary>
            <returns>False if current position doesn't change</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.GetValue(System.Int32)">
            <summary>
            Returns the value of the column at the given position in the table schema. The first column is 1.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBLocalQuery.IsNull(System.Int32)">
            <summary>
            Return True if a column value is NULL at the given position in the table schema. The first column is 1.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBLocalQuery.Eof">
            <summary>
            End of file. Tests if a row movement function has placed the row pointer beyond the last row in the dataset.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDataRow">
            <summary>
            Summary description for VistaDBDataRow.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataRow.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataRow.CancelEdit">
            <summary>
            Discards changes since the last BeginEdit call.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataRow.EndEdit">
            <summary>
            Pushes changes since the last BeginEdit or IBindingList.AddNew call into the underlying object.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataRow.GetValue(System.Int32)">
            <summary>
            Return column value
            </summary>
            <param name="columnNo">Column number (1-based)</param>
            <returns>Column value</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDataRow.SetValue(System.Int32,System.Object)">
            <summary>
            Set column value
            </summary>
            <param name="columnNo">Column number (1-based)</param>
            <param name="value"></param>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDataRow.RowIndex">
            <summary>
            Physical row index
            </summary>
        </member>
        <member name="T:MyMeta.VistaDB.MetaHelper">
            <summary>
            Summary description for MetaHelper.
            </summary>
        </member>
        <member name="T:Provider.VistaDB.VistaDBDatabase">
            <summary>
            VistaDBDatabase class provides a live connection object into a VistaDB database
            </summary>	
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="databasename">Database name</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="DatabaseName">Database name</param>
            <param name="Exclusive">True for exclusive mode</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor. Set DatabaseName, Exclusive and ReadOnly property
            </summary>
            <param name="databasename">Database name</param>
            <param name="exclusive_">True for exclusive mode</param>
            <param name="readonly_">True for read only mode</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ActivateRecycling">
            <summary>
            Activates space recycling mechanism
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ActivatedRecycling">
            <summary>
            Space recycling mechanism status
            </summary>
            <returns>Return True if activated space recycling mechanism</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.AddToExportList(System.String)">
            <summary>
            Add table to XML export\import list
            </summary>
            <param name="cpTableName">Table name</param>
            <returns>Return true if success else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.BeginTransaction">
            <summary>
            Begin transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ClearExportList">
            <summary>
            Clear export\import list
            </summary>
            <returns>Return true if success else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ClearMemoryCache">
            <summary>
            Clear low level data caching made by engine for database.
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.Close">
            <summary>
            Close database
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.CommitTransaction">
            <summary>
            Commit transaction
            </summary>
            <returns>Return true for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.Connect">
            <summary>
            Connect to database
            </summary>
            <returns>True if opened</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ConnectWithoutSync">
            <summary>
            Connect to database, but without synchronization
            </summary>
            <returns>True if opened</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.CreateDatabase(System.Int32,System.Boolean)">
            <summary>
            Create new database without case sensitivity for indexes and searching (overloaded)
            </summary>
            <param name="iCultureId">Culture ID for database</param>
            <param name="bOpenAfterCreation">If true then database opens after creation</param>
            <returns>return true for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.CreateDatabase(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create new database
            </summary>
            <param name="iCultureId">Culture ID for database</param>
            <param name="bOpenAfterCreation">If true then database opens after creation</param>
            <param name="bCaseSensitivity">Sets case-sensitivity flag for character data in run-time searching and filtering operations. Used as respective flag in primary and FTS indexes</param>
            <returns>return true for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.DeactivateRecycling">
            <summary>
            Deactivates space recycling mechanism
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.DropTable(System.String)">
            <summary>
            Drop table from database
            </summary>
            <param name="sTableName">Table name</param>
            <returns>Return true for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.DropTableInstantly(System.String)">
            <summary>
            Drop table from database without using recycling.
            </summary>
            <param name="tableName">Table name</param>
            <returns>Return true for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.EnumTables(System.String[]@)">
            <summary>
            Enum tables in the database
            </summary>
            <param name="list">Table names list</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ExportData(System.String,System.Boolean)">
            <summary>
            Export data from tables (in list) to xml-file
            </summary>
            <param name="cpXmlFileName">Xml-file name</param>
            <param name="OnlySchema">If true, then exports only schema else schema and data</param>
            <returns>Return true if success else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.FlushFileBuffers">
            <summary>
            Flush database data buffers to disk
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.GetCaseSensitive">
            <summary>
            Check database case sensitive flag
            </summary>
            <returns>Return true if database is set to support case sensitive, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ImportData(System.String)">
            <summary>
            Import data to tables (in list)
            </summary>
            <param name="cpXmlFileName">Xml-file name</param>
            <returns>Return true if success else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ImportSchema(System.String)">
            <summary>
            Import schema to current database
            </summary>
            <param name="cpXmlFileName">Xml-file name</param>
            <returns>Return true if success else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.ImportSchemaAndData(System.String)">
            <summary>
            Import schema and data to current database
            </summary>
            <param name="cpXmlFileName">Xml-file name</param>
            <returns>Return true if success else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.InitClass">
            <summary>
            Class object initialiser
            </summary>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.IsTableExist(System.String)">
            <summary>
            Check table existence
            </summary>
            <param name="tableName">Table name</param>
            <returns>Return true, if table exist, else false</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.PackDatabase">
            <summary>
            Pack database
            </summary>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.PackDatabase(System.Boolean)">
            <summary>
            Pack database with option 'save file permission'
            </summary>
            <param name="SaveFilePermission">Save file permission option</param>
            <returns></returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.PackDatabase(System.String,Provider.VistaDB.CypherType,System.Boolean)">
            <summary>
            Pack database
            <param name="newPassword">New password</param>
            <param name="newCypher">New cypher</param>
            <param name="MarkFullEncryption">Mark full encryption option</param>
            </summary>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.PackDatabase(System.String,Provider.VistaDB.CypherType,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Pack database
            <param name="newPassword">New password</param>
            <param name="newCypher">New cypher</param>
            <param name="newCaseSensitive">New case sensitive option</param>
            <param name="newLocale">New locale</param>
            <param name="MarkFullEncryption">Mark full encryption option</param>
            </summary>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.PackDatabase(System.String,Provider.VistaDB.CypherType,System.String,Provider.VistaDB.CypherType,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Pack database
            <param name="oldPassword">Old password</param>
            <param name="oldCypher">Old cypher</param>
            <param name="newPassword">New password</param>
            <param name="newCypher">New cypher</param>
            <param name="newCaseSensitive">New case sensitive option</param>
            <param name="newLocale">New locale</param>
            <param name="MarkFullEncryption">Mark full encryption option</param>
            </summary>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.PackDatabase(System.String,Provider.VistaDB.CypherType,System.String,Provider.VistaDB.CypherType,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Pack database with option 'save file permission'
            </summary>
            <param name="oldPassword">Old password</param>
            <param name="oldCypher">Old cypher</param>
            <param name="newPassword">New password</param>
            <param name="newCypher">New cypher</param>
            <param name="newCaseSensitive">New case sensitive option</param>
            <param name="newLocale">New locale</param>
            <param name="MarkFullEncryption">Mark full encryption option</param>
            <param name="SaveFilePermission">Save file permission option</param>
            <returns>True for success</returns>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.RegisterTable(Provider.VistaDB.VistaDBTable)">
            <summary>
            Register table in list
            </summary>
            <param name="table">Table object</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.UnregisterTable(Provider.VistaDB.VistaDBTable)">
            <summary>
            Unregister table in list
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.RollbackTransaction(System.Boolean)">
            <summary>
            Rollback transaction
            </summary>
            <param name="AllLevels">True for rollback all levels</param>
        </member>
        <member name="M:Provider.VistaDB.VistaDBDatabase.SaveToFile(System.String)">
            <summary>
            Saves in-memory table into 
            </summary>
            <param name="databaseName">Database name</param>
            <returns></returns>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.CaseSensitive">
            <summary>
            Get case sensitivity for database
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.ClusterSize">
            <summary>
            Cluster size
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Connected">
            <summary>
            Database connected state
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Cypher">
            <summary>
            Gets or sets the database encryption, or Cypher type
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.DatabaseId">
            <summary>
            Gets the Database ID
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.DatabaseName">
            <summary>
            Gets or sets the Database filename
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Description">
            <summary>
            Database description
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Exclusive">
            <summary>
            Gets or sets the database exclusive mode property.
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Locale">
            <summary>
            Get Locale for database
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Parameters">
            <summary>
            Database connection parameters
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.ReadOnly">
            <summary>
            Database read only mode property
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Password">
            <summary>
            Password for database
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.SyncRoot">
            <summary>
            Internal object for synchronization 
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.Version">
            <summary>
            VistaDB engine version
            </summary>
        </member>
        <member name="P:Provider.VistaDB.VistaDBDatabase.TransactionLevel">
            <summary>
            Database transaction level
            </summary>
        </member>
    </members>
</doc>
