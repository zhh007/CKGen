<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
import { Injectable } from '@angular/core';
import { Http, Headers, URLSearchParams, RequestOptions } from "@angular/http";
import { Observer, Observable } from "rxjs/Rx";

<# if(!string.IsNullOrEmpty(ImportModels)) {#>
import {
  <#= ImportModels #> } from './<#= Api.Name.ToLower() #>.model';
<# } #>
import { environment } from 'environments/environment';

@Injectable()
export class <#= Api.Name #>Service {
  private _baseURL: string = environment.SysManageApiUrlPrefix + "<#= BaseUrl #>";

  constructor(private _http: Http) {
  }

  getHeaders() {
    let user = JSON.parse(localStorage.getItem('currentUser'));
    let token = user.token;
    return new Headers({
      'Content-Type': 'application/json',
      'Authorization': 'bearer ' + token
    });
  }

<#
	
	foreach (var mt in this.Api.Methods)
	{
	string paramStr = "";
	string contentStr = null;
	if(mt.Params != null)
	{
		if(mt.Params.Count == 1)
		{
			if(mt.Params[0].IsSampleType)
			{
				paramStr = mt.Params[0].Name + ": " + mt.Params[0].EntityName;
				contentStr = "{'" + mt.Params[0].Name + "': " + mt.Params[0].Name + "}";
			}
			else
            {
                paramStr = mt.Params[0].Name + ": " + mt.Params[0].EntityName;
                contentStr = mt.Params[0].Name;
            }
		}
		else
		{
			contentStr += "{";
			for(int i = 0; i < mt.Params.Count; i++)
			{
				paramStr += mt.Params[i].Name + ": " + mt.Params[i].EntityName;
				contentStr += "'" + mt.Params[i].Name + "': " + mt.Params[i].Name;
				if(i < mt.Params.Count - 1)
				{
					paramStr +=", ";
					contentStr +=", ";
				}
			}
			contentStr += "}";
		}
	}
	
#>
  <#= mt.Name #>(<#= paramStr #>): Observable<<#= mt.ResponseEntity #>> {
    let url = this._baseURL + "/<#= mt.Name #>";
    let headers = this.getHeaders();
    let options = new RequestOptions({ headers: headers });
<# if(paramStr == "") {#>
    let content = null;
<# } else { #>
    let content = JSON.stringify(<#= contentStr #>);
<# } #>

    return this._http.post(url, content, options)
      .map(resp => {
        return resp.json();
      })
      ._catch((error: any) => Observable.throw(error || 'Server error'));
  }

<#
        }
#>
}
